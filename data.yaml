attributes:
- name: assume
  rows:
  - value: 202207
    papers: P1774R8 CWG2615
  support:
    clang:
    - value: 202207
    gcc:
    - value: 202207
    msvc: null
- name: carries_dependency
  rows:
  - value: 200809
    papers: N2782
  support:
    clang:
    - value: 200809
    gcc: null
    msvc:
    - value: 200809
- name: deprecated
  rows:
  - value: 201309
    papers: N3760
  support:
    clang:
    - value: 201309
    gcc:
    - value: 201309
    msvc:
    - value: 201309
- name: fallthrough
  rows:
  - value: 201603
    papers: P0188R1
  support:
    clang:
    - value: 201603
    gcc:
    - value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: likely
  rows:
  - value: 201803
    papers: P0479R5
  support:
    clang:
    - value: 201803
    gcc:
    - value: 201803
    msvc:
    - since: C++20
      value: 201803
- name: maybe_unused
  rows:
  - value: 201603
    papers: P0212R1
  support:
    clang:
    - value: 201603
    gcc:
    - value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: no_unique_address
  rows:
  - value: 201803
    papers: P0840R2
  support:
    clang:
    - value: 201803
    gcc:
    - value: 201803
    msvc: null
- name: nodiscard
  rows:
  - value: 201603
    papers: P0189R1
  - value: 201907
    papers: P1301R4 P1771R1
  support:
    clang:
    - value: 201907
    gcc:
    - value: 201907
    msvc:
    - value: 201907
- name: noreturn
  rows:
  - value: 200809
    papers: N2761
  support:
    clang:
    - value: 200809
    gcc:
    - value: 200809
    msvc:
    - value: 200809
- name: unlikely
  rows:
  - value: 201803
    papers: P0479R5
  support:
    clang:
    - value: 201803
    gcc:
    - value: 201803
    msvc:
    - since: C++20
      value: 201803
language:
- name: __cpp_aggregate_bases
  rows:
  - value: 201603
    papers: P0017R1
    cppreference-description: '[[cpp/language/aggregate initialization|Aggregate classes]]
      with base classes'
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_aggregate_nsdmi
  rows:
  - value: 201304
    papers: N3653
    cppreference-description: '[[cpp/language/aggregate initialization|Aggregate classes]]
      with [[cpp/language/data_members#Member initialization|default member initializers]]'
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_aggregate_paren_init
  rows:
  - value: 201902
    papers: P0960R3
    cppreference-description: '[[cpp/language/aggregate initialization|Aggregate initialization]]
      in the form of [[cpp/language/direct initialization|direct initialization]]'
  support:
    clang:
    - since: C++20
      value: 201902
    gcc:
    - since: C++20
      value: 201902
    msvc:
    - since: C++20
      value: 201902
- name: __cpp_alias_templates
  rows:
  - value: 200704
    papers: N2258
    cppreference-description: '[[cpp/language/type alias|Alias templates]]'
  support:
    clang:
    - since: C++11
      value: 200704
    gcc:
    - since: C++11
      value: 200704
    msvc:
    - value: 200704
- name: __cpp_aligned_new
  rows:
  - value: 201606
    papers: P0035R4
    cppreference-description: '[[cpp/memory/new/align_val_t|Dynamic memory allocation
      for over-aligned data]]'
  support:
    clang:
    - since: C++17
      value: 201606
    - option: -faligned-allocation -faligned-new
      value: 201606
    gcc:
    - since: C++17
      value: 201606
    - option: -faligned-new
      value: 201606
    msvc:
    - since: C++17
      disabled-by: /Zc:alignedNew-
      value: 201606
- name: __cpp_attributes
  rows:
  - value: 200809
    papers: N2761
    cppreference-description: '[[cpp/language/attributes|Attributes]]'
  support:
    clang:
    - since: C++11
      value: 200809
    gcc:
    - since: C++11
      value: 200809
    msvc:
    - value: 200809
- name: __cpp_auto_cast
  rows:
  - value: 202110
    papers: P0849R8
    cppreference-description: '[[cpp/language/explicit cast|{{c|auto(x)}} and {{c|auto{x}
      }}]]'
  support:
    clang:
    - since: C++23
      value: 202110
    gcc:
    - since: C++23
      value: 202110
    msvc: null
- name: __cpp_binary_literals
  rows:
  - value: 201304
    papers: N3472
    cppreference-description: '[[cpp/language/integer literal|Binary literals]]'
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    - pedantic: false
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_capture_star_this
  rows:
  - value: 201603
    papers: P0018R3
    cppreference-description: '[[cpp/language/lambda#Lambda capture|Lambda capture
      of *this by value as [=,*this] ]]'
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_char8_t
  rows:
  - value: 201811
    papers: P0482R6
    cppreference-description: '{{ltt|cpp/keyword/char8_t}}'
  - value: 202207
    papers: P2513R4
    cppreference-description: '{{co|char8_t}} compatibility and portability fix (allow
      [[cpp/language/aggregate initialization#Character arrays|initialization of (unsigned)
      char arrays]] from [[cpp/language/string literal|UTF-8 string literals]])'
    cppreference-treats-as-dr-against: C++20
  support:
    clang:
    - since: C++20
      value: 202207
    - option: -fchar8_t
      value: 202207
    gcc:
    - since: C++20
      value: 202207
    - option: -fchar8_t
      value: 202207
    msvc:
    - since: C++20
      value: 202207
    - option: /Zc:char8_t
      value: 202207
- name: __cpp_concepts
  rows:
  - value: 201707
    papers: P0734R0
  - value: 201811
    papers: P1084R2
  - value: 201907
    papers: P1452R2
    cppreference-description: '[[cpp/language/constraints|Concepts]]'
  - value: 202002
    papers: P0848R3 P2493R0
    cppreference-description: Conditional trivial special member functions
  support:
    clang:
    - since: C++20
      value: 202002
    gcc:
    - option: -fconcepts
      value: 202002
    - since: C++20
      value: 202002
    msvc:
    - since: C++20
      value: 202002
- name: __cpp_conditional_explicit
  rows:
  - value: 201806
    papers: P0892R2
    cppreference-description: '[[cpp/language/explicit|{{tt|explicit(bool)}}]]'
  support:
    clang:
    - since: C++20
      value: 201806
    gcc:
    - since: C++20
      value: 201806
    msvc:
    - since: C++20
      value: 201806
- name: __cpp_consteval
  rows:
  - value: 201811
    papers: P1073R3
    cppreference-description: '[[cpp/language/consteval|Immediate functions]]'
  - value: 202211
    papers: P2564R3
    cppreference-description: Making {{tt|consteval}} propagate up
    cppreference-treats-as-dr-against: C++20
  support:
    clang:
    - since: C++20
      value: 202211
    gcc:
    - since: C++20
      value: 202211
    msvc:
    - since: C++20
      value: 201811
- name: __cpp_constexpr
  rows:
  - value: 200704
    papers: N2235
    cppreference-description: '{{ltt|cpp/language/constexpr}}'
  - value: 201304
    papers: N3652
    cppreference-description: '[[cpp/language/constexpr#relaxed-constexpr|Relaxed
      {{tt|constexpr}}]], [[cpp/language/constexpr#constexpr-method-is-const|non-{{tt|const}}
      {{tt|constexpr}} methods]]'
  - value: 201603
    papers: P0170R1
    cppreference-description: '[[cpp/language/lambda|Constexpr lambda]]'
  - value: 201806
    papers: P1064R0
  - value: 201811
    papers: P1002R1 P1327R1
  - value: 201907
    papers: P1331R2 P1668R1
    cppreference-description: '[[cpp/language/virtual|Virtual function]] calls in
      constant expressions; [[cpp/language/try|{{c/core|try}} blocks]] in {{c/core|constexpr}}
      functions, {{ltt|cpp/language/dynamic_cast}} and polymorphic {{ltt|cpp/language/typeid}}
      in constant expressions; trivial [[cpp/language/default initialization|default
      initialization]] and [[cpp/language/asm|asm-declaration]] in {{c/core|constexpr}}
      functions'
  - value: 202002
    papers: P1330R0 P2493R0
    cppreference-description: Changing the active member of a union in constant evaluation
  - value: 202110
    papers: P2242R3
    cppreference-description: Non-[[cpp/named req/LiteralType|literal]] variables,
      labels, and {{ltt|cpp/language|goto}} statements in {{c/core|constexpr}} functions
  - value: 202207
    papers: P2448R2
    cppreference-description: Relaxing some restrictions on [[cpp/language/constexpr|constexpr]]
      functions and function templates
  - value: 202211
    papers: P2647R1
    cppreference-description: Permitting static {{c/core|constexpr}} variables in
      {{c/core|constexpr}} functions
  - value: 202306
    papers: P2738R1
    cppreference-description: 'Constexpr cast from {{c|void*}}: towards {{c/core|constexpr}}
      type-erasure'
  - value: 202406
    papers: P2747R2
    cppreference-description: '{{c/core|constexpr}} placement new'
  support:
    clang:
    - since: C++11
      value: 200704
    - since: C++14
      value: 201304
    - since: C++17
      value: 201603
    - since: C++20
      value: 201907
    - since: C++23
      value: 202211
    - since: C++26
      value: 202306
    gcc:
    - since: C++11
      value: 200704
    - since: C++14
      value: 201304
    - since: C++17
      value: 201603
    - since: C++20
      value: 202002
    - since: C++23
      value: 202211
    - since: C++26
      value: 202406
    msvc:
    - value: 201304
    - since: C++17
      value: 201603
    - since: C++20
      value: 202002
- name: __cpp_constexpr_dynamic_alloc
  rows:
  - value: 201907
    papers: P0784R7
    cppreference-description: Operations for dynamic storage duration in {{c/core|constexpr}}
      functions
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_constexpr_in_decltype
  rows:
  - value: 201711
    papers: P0859R0
    cppreference-description: Generation of function and variable definitions when
      [[cpp/language/constant expression#Functions and variables needed for constant
      evaluation|needed for constant evaluation]]
    cppreference-treats-as-dr-against: C++11
  support:
    clang:
    - since: C++11
      value: 201711
    gcc:
    - since: C++20
      value: 201711
    msvc: null
- name: __cpp_constinit
  rows:
  - value: 201907
    papers: P1143R2
    cppreference-description: '{{ltt|cpp/language/constinit}}'
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_decltype
  rows:
  - value: 200707
    papers: N2343
    cppreference-description: '{{ltt|cpp/language/decltype}}'
  support:
    clang:
    - since: C++11
      value: 200707
    gcc:
    - since: C++11
      value: 200707
    msvc:
    - value: 200707
- name: __cpp_decltype_auto
  rows:
  - value: 201304
    papers: N3638
    cppreference-description: '[[cpp/language/auto|Return type deduction for normal
      functions]]'
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_deduction_guides
  rows:
  - value: 201606
    papers: P0091R3
  - value: 201611
    papers: P0512R0
  - value: 201703
    papers: P0620R0
    cppreference-description: '[[cpp/language/class template argument deduction|Template
      argument deduction for class templates]]'
  - value: 201907
    papers: P1814R0 P1816R0
    cppreference-description: '[[cpp/language/class template argument deduction|<abbr
      title="Class template argument deduction">CTAD</abbr>]] for aggregates and aliases'
  support:
    clang:
    - since: C++17
      value: 201703
    gcc:
    - since: C++17
      value: 201703
    - since: C++20
      value: 201907
    msvc:
    - since: C++17
      value: 201703
    - since: C++20
      value: 201907
- name: __cpp_delegating_constructors
  rows:
  - value: 200604
    papers: N1986
    cppreference-description: '[[cpp/language/initializer list#Delegating constructor|Delegating
      constructors]]'
  support:
    clang:
    - since: C++11
      value: 200604
    gcc:
    - since: C++11
      value: 200604
    msvc:
    - value: 200604
- name: __cpp_deleted_function
  rows:
  - value: 202403
    papers: P2573R2
    cppreference-description: Deleted [[cpp/language/function|function definitions]]
      with messages ({{c/core|1== delete("should have a reason");}})
  support:
    clang:
    - value: 202403
    gcc:
    - since: C++26
      value: 202403
    msvc: null
- name: __cpp_designated_initializers
  rows:
  - value: 201707
    papers: P0329R4
    cppreference-description: '[[cpp/language/aggregate initialization#Designated
      initializers|Designated initializer]]'
  support:
    clang:
    - since: C++20
      value: 201707
    gcc:
    - since: C++20
      value: 201707
    msvc:
    - since: C++20
      value: 201707
- name: __cpp_enumerator_attributes
  rows:
  - value: 201411
    papers: N4266
    cppreference-description: Attributes for [[cpp/language/enum|enumerators]]
  support:
    clang:
    - since: C++17
      value: 201411
    gcc:
    - since: C++17
      value: 201411
    msvc:
    - value: 201411
- name: __cpp_exceptions
  rows:
  - value: 199711
    feature: Exception handling
  support:
    clang:
    - disabled-by: -fno-exceptions -fno-cxx-exceptions
      value: 199711
    gcc:
    - disabled-by: -fno-exceptions
      value: 199711
    msvc:
    - option: /EHs
      value: 199711
- name: __cpp_explicit_this_parameter
  rows:
  - value: 202110
    papers: P0847R7
    cppreference-description: '[[cpp/language/member functions#Explicit object parameter|Explicit
      object parameter]]'
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202110
    msvc: null
- name: __cpp_fold_expressions
  rows:
  - value: 201411
    papers: N4295
  - value: 201603
    papers: P0036R0
    cppreference-description: '[[cpp/language/fold|Fold expressions]]'
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_generic_lambdas
  rows:
  - value: 201304
    papers: N3649
    cppreference-description: '[[cpp/language/lambda|Generic lambda expressions]]'
  - value: 201707
    papers: P0428R2
    cppreference-description: Explicit template parameter list for [[cpp/language/lambda|generic
      lambdas]]
  support:
    clang:
    - since: C++14
      value: 201304
    - since: C++20
      value: 201707
    gcc:
    - since: C++14
      value: 201304
    - since: C++20
      value: 201707
    msvc:
    - value: 201304
    - since: C++20
      value: 201707
- name: __cpp_guaranteed_copy_elision
  rows:
  - value: 201606
    papers: P0135R1
    cppreference-description: Guaranteed copy elision through simplified [[cpp/language/value
      category|value categories]]
  support:
    clang:
    - since: C++17
      value: 201606
    gcc:
    - since: C++17
      value: 201606
    msvc:
    - since: C++17
      value: 201606
- name: __cpp_hex_float
  rows:
  - value: 201603
    papers: P0245R1
    cppreference-description: '[[cpp/language/floating literal|Hexadecimal floating
      literals]]'
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    - pedantic: false
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_if_consteval
  rows:
  - value: 202106
    papers: P1938R3
    cppreference-description: '[[cpp/language/if|{{tt|consteval if}}]]'
  support:
    clang:
    - since: C++23
      value: 202106
    gcc:
    - since: C++23
      value: 202106
    msvc: null
- name: __cpp_if_constexpr
  rows:
  - value: 201606
    papers: P0292R2
    cppreference-description: '[[cpp/language/if|{{tt|constexpr if}}]]'
  support:
    clang:
    - since: C++17
      value: 201606
    gcc:
    - since: C++17
      value: 201606
    msvc:
    - since: C++17
      value: 201606
- name: __cpp_impl_coroutine
  rows:
  - value: 201902
    papers: P0912R5 LWG3393
    cppreference-description: '[[cpp/language/coroutines|Coroutines]] (compiler support)'
  support:
    clang:
    - since: C++20
      value: 201902
    gcc:
    - since: C++20
      value: 201902
    - option: -fcoroutines
      value: 201902
    msvc:
    - since: C++20
      disabled-by: /await
      value: 201902
    - enabled-by: /await:strict
      value: 201902
- name: __cpp_impl_destroying_delete
  rows:
  - value: 201806
    papers: P0722R3
    cppreference-description: '[[cpp/memory/new/operator delete|Destroying operator
      delete]] (compiler support)'
  support:
    clang:
    - value: 201806
    gcc:
    - since: C++20
      value: 201806
    msvc:
    - since: C++20
      value: 201806
- name: __cpp_impl_three_way_comparison
  rows:
  - value: 201711
    papers: P0515R3 P0768R1
  - value: 201902
    papers: P1185R2
  - value: 201907
    papers: P1630R1
    cppreference-description: '[[cpp/language/operator comparison#Three-way comparison|Three-way
      comparison]] (compiler support)'
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_implicit_move
  rows:
  - value: 202207
    papers: P2266R3
    cppreference-description: Simpler [[cpp/language/return#Automatic move from local
      variables and parameters|implicit move]]
  support:
    clang:
    - since: C++23
      value: 202207
    gcc:
    - since: C++23
      value: 202207
    msvc: null
- name: __cpp_inheriting_constructors
  rows:
  - value: 200802
    papers: N2540
    cppreference-description: '[[cpp/language/using declaration#Inheriting constructors|Inheriting
      constructors]]'
  - value: 201511
    papers: P0136R1
    cppreference-description: Rewording inheriting constructors
    cppreference-treats-as-dr-against: C++11
  support:
    clang:
    - since: C++11
      value: 201511
    gcc:
    - since: C++11
      value: 201511
    msvc:
    - value: 200802
    - since: C++17
      value: 201511
- name: __cpp_init_captures
  rows:
  - value: 201304
    papers: N3648
    cppreference-description: '[[cpp/language/lambda|Lambda init-capture]]'
  - value: 201803
    papers: P0780R2
    cppreference-description: Allow pack expansion in [[cpp/language/lambda|lambda]]
      init-capture
  support:
    clang:
    - since: C++14
      value: 201304
    - since: C++20
      value: 201803
    gcc:
    - since: C++14
      value: 201304
    - since: C++20
      value: 201803
    msvc:
    - value: 201304
    - since: C++20
      value: 201803
- name: __cpp_initializer_lists
  rows:
  - value: 200806
    papers: N2672
    cppreference-description: '[[cpp/language/list initialization|List-initialization]]
      and {{lc|std::initializer_list}}'
  support:
    clang:
    - since: C++11
      value: 200806
    gcc:
    - since: C++11
      value: 200806
    msvc:
    - value: 200806
- name: __cpp_inline_variables
  rows:
  - value: 201606
    papers: P0386R2
    cppreference-description: '[[cpp/language/inline|Inline variables]]'
  support:
    clang:
    - since: C++17
      value: 201606
    gcc:
    - since: C++17
      value: 201606
    msvc:
    - since: C++17
      value: 201606
- name: __cpp_lambdas
  rows:
  - value: 200907
    papers: N2927
    cppreference-description: '[[cpp/language/lambda|Lambda expressions]]'
  support:
    clang:
    - since: C++11
      value: 200907
    gcc:
    - since: C++11
      value: 200907
    msvc:
    - value: 200907
- name: __cpp_modules
  rows:
  - value: 201907
    papers: P1103R3 P1811R0
    cppreference-description: '[[cpp/language/modules|Modules]]'
  support:
    clang: null
    gcc: null
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_multidimensional_subscript
  rows:
  - value: 202110
    papers: P2128R6
    cppreference-description: Multidimensional [[cpp/language/operator member access|subscript
      operator]]
  - value: 202211
    papers: P2589R1
    cppreference-description: '{{tt|static}} {{ltt|cpp/language/operators|operator[]}}'
  support:
    clang:
    - since: C++23
      value: 202211
    gcc:
    - since: C++23
      value: 202211
    msvc: null
- name: __cpp_named_character_escapes
  rows:
  - value: 202207
    papers: P2071R2
    cppreference-description: Named [[cpp/language/escape|universal character escapes]]
  support:
    clang:
    - value: 202207
    gcc:
    - since: C++23
      value: 202207
    msvc: null
- name: __cpp_namespace_attributes
  rows:
  - value: 201411
    papers: N4266
    cppreference-description: Attributes for [[cpp/language/namespace|namespaces]]
  support:
    clang:
    - since: C++17
      value: 201411
    gcc:
    - since: C++17
      value: 201411
    msvc:
    - value: 201411
- name: __cpp_noexcept_function_type
  rows:
  - value: 201510
    papers: P0012R1
    cppreference-description: Make [[cpp/language/noexcept spec|exception specifications]]
      be part of the type system
  support:
    clang:
    - since: C++17
      value: 201510
    gcc:
    - since: C++17
      value: 201510
    msvc:
    - since: C++17
      disabled-by: /Zc:noexceptTypes-
      value: 201510
- name: __cpp_nontype_template_args
  rows:
  - value: 201411
    papers: N4268
    cppreference-description: Allow constant evaluation for all [[cpp/language/template
      parameters#Template non-type arguments|non-type template arguments]]
  - value: 201911
    papers: P1907R1
    cppreference-description: Class types and floating-point types in [[cpp/language/template
      parameters#Non-type template parameter|non-type template parameters]]
  support:
    clang:
    - since: C++17
      value: 201411
    gcc:
    - since: C++17
      value: 201411
    - since: C++20
      value: 201911
    msvc:
    - since: C++17
      value: 201411
    - since: C++20
      value: 201911
- name: __cpp_nontype_template_parameter_auto
  rows:
  - value: 201606
    papers: P0127R2
    cppreference-description: Declaring [[cpp/language/template parameters#Non-type
      template parameter|non-type template parameters]] with {{tt|auto}}
  support:
    clang:
    - since: C++17
      value: 201606
    gcc:
    - since: C++17
      value: 201606
    msvc:
    - since: C++17
      value: 201606
- name: __cpp_nontype_template_parameter_class
  rows:
  - value: 201806
    papers: P0732R2
  - value: 201911
    papers: P1907R1
    removed: true
- name: __cpp_nsdmi
  rows:
  - value: 200809
    papers: N2756
    cppreference-description: '[[cpp/language/data members#Member initialization|Non-static
      data member initializers]]'
  support:
    clang:
    - since: C++11
      value: 200809
    gcc:
    - since: C++11
      value: 200809
    msvc:
    - value: 200809
- name: __cpp_pack_indexing
  rows:
  - value: 202311
    papers: P2662R3
    cppreference-description: '[[cpp/language/pack indexing|Pack indexing]]'
  support:
    clang:
    - value: 202311
    gcc: null
    msvc: null
- name: __cpp_placeholder_variables
  rows:
  - value: 202306
    papers: P2169R4
    cppreference-description: A nice placeholder with no name
  support:
    clang:
    - value: 202306
    gcc:
    - since: C++26
      value: 202306
    msvc: null
- name: __cpp_range_based_for
  rows:
  - value: 200907
    papers: N2930
    cppreference-description: '[[cpp/language/range-for|Range-based {{tt|for}} loop]]'
  - value: 201603
    papers: P0184R0
    cppreference-description: '[[cpp/language/range-for#Explanation|Range-based {{tt|for}}
      loop]] with different {{tt|begin}}/{{tt|end}} types'
  - value: 202211
    papers: P2644R1 P2718R0 CWG2659
    cppreference-description: Lifetime extension in range-based {{tt|for}}
  support:
    clang:
    - since: C++11
      value: 200907
    - since: C++17
      value: 201603
    - since: C++23
      value: 202211
    gcc:
    - since: C++11
      value: 200907
    - since: C++17
      value: 201603
    msvc:
    - value: 200907
    - since: C++17
      value: 201603
- name: __cpp_raw_strings
  rows:
  - value: 200710
    papers: N2442
    cppreference-description: '[[cpp/language/string literal|Raw string literals]]'
  support:
    clang:
    - since: C++11
      value: 200710
    gcc:
    - since: C++11
      value: 200710
    msvc:
    - value: 200710
- name: __cpp_ref_qualifiers
  rows:
  - value: 200710
    papers: N2439
    cppreference-description: '[[cpp/language/member functions|ref-qualifiers]]'
  support:
    clang:
    - since: C++11
      value: 200710
    gcc:
    - since: C++11
      value: 200710
    msvc:
    - value: 200710
- name: __cpp_return_type_deduction
  rows:
  - value: 201304
    papers: N3638
    cppreference-description: '[[cpp/language/auto|Return type deduction for normal
      functions]]'
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_rtti
  rows:
  - value: 199711
    feature: Run-time type identification
  support:
    clang:
    - disabled-by: -fno-rtti
      value: 199711
    gcc:
    - disabled-by: -fno-rtti
      value: 199711
    msvc:
    - disabled-by: /GR-
      value: 199711
- name: __cpp_rvalue_references
  rows:
  - value: 200610
    papers: N2118
    cppreference-description: '[[cpp/language/reference|Rvalue reference]]'
  support:
    clang:
    - since: C++11
      value: 200610
    gcc:
    - since: C++11
      value: 200610
    msvc:
    - value: 200610
- name: __cpp_size_t_suffix
  rows:
  - value: 202011
    papers: P0330R8
    cppreference-description: '[[cpp/language/integer literal|Literal suffixes for
      {{tt|size_t}} and its signed version]]'
  support:
    clang:
    - since: C++23
      value: 202011
    gcc:
    - since: C++23
      value: 202011
    msvc: null
- name: __cpp_sized_deallocation
  rows:
  - value: 201309
    papers: N3778
    cppreference-description: '[[cpp/memory/new/operator delete|Sized deallocation]]'
  support:
    clang:
    - since: C++14
      value: 201309
    - option: -fsized-deallocation
      value: 201309
    gcc:
    - since: C++14
      value: 201309
    - option: -fsized-deallocation
      value: 201309
    msvc:
    - disabled-by: /Zc:sizedDealloc-
      value: 201309
- name: __cpp_static_assert
  rows:
  - value: 200410
    papers: N1720
    cppreference-description: '{{ltt|cpp/language/static_assert}}'
  - value: 201411
    papers: N3928
    cppreference-description: '[[cpp/language/static_assert|Single-argument {{tt|static_assert}}]]'
  - value: 202306
    papers: P2741R3
    cppreference-description: '[[cpp/language/static_assert|User-generated {{tt|static_assert}}
      messages]]'
  support:
    clang:
    - since: C++11
      value: 200410
    - since: C++17
      value: 201411
    - since: C++26
      value: 202306
    gcc:
    - since: C++11
      value: 200410
    - since: C++17
      value: 201411
    - since: C++26
      value: 202306
    msvc:
    - value: 200410
    - since: C++17
      value: 201411
- name: __cpp_static_call_operator
  rows:
  - value: 202207
    papers: P1169R4
    cppreference-description: '{{tt|static}} {{ltt|cpp/language/operators|operator()}}'
  support:
    clang:
    - since: C++11
      value: 202207
    gcc:
    - since: C++23
      value: 202207
    msvc: null
- name: __cpp_structured_bindings
  rows:
  - value: 201606
    papers: P0217R3
    cppreference-description: '[[cpp/language/structured binding|Structured bindings]]'
  - value: 202403
    papers: P0609R3
    cppreference-description: '[[cpp/language/attributes|Attributes]] for [[cpp/language/structured
      binding|structured bindings]]'
  support:
    clang:
    - since: C++17
      value: 202403
    gcc:
    - since: C++17
      value: 201606
    - since: C++26
      value: 202403
    msvc:
    - since: C++17
      value: 201606
- name: __cpp_template_template_args
  rows:
  - value: 201611
    papers: P0522R0
    cppreference-description: Matching of [[cpp/language/template parameters#Template
      template arguments|template template-arguments]]
  support:
    clang:
    - disabled-by: -fno-relaxed-template-template-args
      value: 201611
    gcc:
    - since: C++17
      value: 201611
    msvc:
    - since: C++17
      value: 201611
- name: __cpp_threadsafe_static_init
  rows:
  - value: 200806
    papers: N2660
    cppreference-description: '[[cpp/language/storage duration#Static local variables|Dynamic
      initialization and destruction with concurrency]]'
  support:
    clang:
    - disabled-by: -fno-threadsafe-statics
      value: 200806
    gcc:
    - disabled-by: -fno-threadsafe-statics
      value: 200806
    msvc:
    - disabled-by: /Zc:threadSafeInit-
      value: 200806
- name: __cpp_unicode_characters
  rows:
  - value: 200704
    papers: N2249
    cppreference-description: '[[cpp/language/types|New character types]] ({{co|char16_t}}
      and {{co|char32_t}})'
  support:
    clang:
    - since: C++11
      value: 200704
    gcc:
    - since: C++11
      value: 200704
    - since: C++17
      value: 201411
    msvc:
    - value: 200704
- name: __cpp_unicode_literals
  rows:
  - value: 200710
    papers: N2442
    cppreference-description: '[[cpp/language/string literal|Unicode string literals]]'
  support:
    clang:
    - since: C++11
      value: 200710
    gcc:
    - since: C++11
      value: 200710
    msvc:
    - value: 200710
- name: __cpp_user_defined_literals
  rows:
  - value: 200809
    papers: N2765
    cppreference-description: '[[cpp/language/user literal|User-defined literals]]'
  support:
    clang:
    - since: C++11
      value: 200809
    gcc:
    - since: C++11
      value: 200809
    msvc:
    - value: 200809
- name: __cpp_using_enum
  rows:
  - value: 201907
    papers: P1099R5
    cppreference-description: '{{ltt|cpp/language/enum#Using-enum-declaration|using
      enum}}'
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_variable_templates
  rows:
  - value: 201304
    papers: N3651
    cppreference-description: '[[cpp/language/variable template|Variable templates]]'
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_variadic_friend
  rows:
  - value: 202403
    papers: P2893R3
    cppreference-description: Variadic [[cpp/language/friend|friend declarations]]
  support:
    clang: null
    gcc:
    - since: C++26
      value: 202403
    msvc: null
- name: __cpp_variadic_templates
  rows:
  - value: 200704
    papers: N2242
    cppreference-description: '[[cpp/language/parameter pack|Variadic templates]]'
  support:
    clang:
    - since: C++11
      value: 200704
    gcc:
    - since: C++11
      value: 200704
    msvc:
    - value: 200704
- name: __cpp_variadic_using
  rows:
  - value: 201611
    papers: P0195R2
    cppreference-description: Pack expansions in [[cpp/language/using declaration|{{tt|using}}-declarations]]
  support:
    clang:
    - since: C++17
      value: 201611
    gcc:
    - since: C++17
      value: 201611
    msvc:
    - since: C++17
      value: 201611
library:
- name: __cpp_lib_adaptor_iterator_pair_constructor
  header_list: queue stack
  rows:
  - value: 202106
    papers: P1425R4
    cppreference-description: Iterator pair constructors for {{lc|std::stack}} and
      {{lc|std::queue}}
  support:
    clang:
    - since: C++23
      value: 202106
    gcc:
    - since: C++23
      value: 202106
    msvc:
    - since: C++23
      value: 202106
- name: __cpp_lib_addressof_constexpr
  header_list: memory
  rows:
  - value: 201603
    papers: LWG2296
    cppreference-description: Constexpr {{lc|std::addressof}}
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - value: 201603
- name: __cpp_lib_algorithm_default_value_type
  header_list: algorithm deque forward_list list ranges string vector
  rows:
  - value: 202403
    papers: P2248R8
    cppreference-description: Enabling [[cpp/language/list initialization|list-initialization]]
      for [[cpp/algorithm|algorithms]]
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_algorithm_iterator_requirements
  header_list: algorithm memory numeric
  rows:
  - value: 202207
    papers: P2408R5
    cppreference-description: Ranges iterators as inputs to non-Ranges [[cpp/algorithm|algorithms]]
  support:
    clang: null
    gcc: null
    msvc:
    - since: C++20
      value: 202207
- name: __cpp_lib_allocate_at_least
  header_list: memory
  rows:
  - value: 202106
    papers: P0401R6
  - value: 202302
    papers: P2652R2 LWG3887
    cppreference-description: 'Size-feedback in the Allocator interface, e.g.: {{l2tt
      std|cpp/memory/allocator/allocate_at_least}}, {{l2tt std|cpp/memory/allocator_traits/allocate_at_least}}'
  support:
    clang:
    - since: C++23
      value: 202302
    gcc: null
    msvc:
    - since: C++23
      value: 202302
- name: __cpp_lib_allocator_traits_is_always_equal
  header_list: memory scoped_allocator string deque forward_list list vector map set
    unordered_map unordered_set
  rows:
  - value: 201411
    papers: N4258
    cppreference-description: '{{ltt|cpp/memory/allocator_traits|std::allocator_traits::is_always_equal}}'
  support:
    clang:
    - since: C++17
      value: 201411
    gcc:
    - since: C++11
      value: 201411
    msvc:
    - value: 201411
- name: __cpp_lib_any
  header_list: any
  rows:
  - value: 201603
    papers: P0220R1
  - value: 201606
    papers: P0032R3
    cppreference-description: '{{lc|std::any}}'
  support:
    clang:
    - since: C++17
      value: 201606
    gcc:
    - since: C++17
      value: 201606
    msvc:
    - since: C++17
      value: 201606
- name: __cpp_lib_apply
  header_list: tuple
  rows:
  - value: 201603
    papers: P0220R1
    cppreference-description: '{{lc|std::apply}}'
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_lib_array_constexpr
  header_list: iterator array
  rows:
  - value: 201603
    papers: P0031R0
    cppreference-description: Constexpr for {{lc|std::reverse_iterator}}, {{lc|std::move_iterator}},
      {{lc|std::array}} and [[cpp/iterator#Range_access|range access]]
  - value: 201803
    papers: P0858R0 LWG3257
  - value: 201806
    papers: P1023R0
  - value: 201811
    papers: P1032R1
    cppreference-description: '{{named req|ConstexprIterator}}; constexpr comparison
      for {{lc|std::array}}; misc constexpr bits ({{lc|std::array::fill}} et al.)'
  support:
    clang:
    - since: C++17
      value: 201603
    - since: C++20
      value: 201811
    gcc:
    - since: C++17
      value: 201803
    - since: C++20
      value: 201811
    msvc:
    - since: C++17
      value: 201803
    - since: C++20
      value: 201811
- name: __cpp_lib_as_const
  header_list: utility
  rows:
  - value: 201510
    papers: P0007R1
    cppreference-description: '{{lc|std::as_const}}'
  support:
    clang:
    - since: C++17
      value: 201510
    gcc:
    - since: C++17
      value: 201510
    msvc:
    - value: 201510
- name: __cpp_lib_associative_heterogeneous_erasure
  header_list: map set unordered_map unordered_set
  rows:
  - value: 202110
    papers: P2077R3
    cppreference-description: Heterogeneous erasure in {{lsd|cpp/container#Associative
      containers}} and {{lsd|cpp/container#Unordered associative containers}}
  support:
    clang: null
    gcc: null
    msvc:
    - since: C++23
      value: 202110
- name: __cpp_lib_associative_heterogeneous_insertion
  header_list: map set unordered_map unordered_set
  rows:
  - value: 202306
    papers: P2363R5
    cppreference-description: Heterogeneous overloads for the remaining member functions
      in [[cpp/container#Associative containers|ordered]] and {{lsd|cpp/container#Unordered
      associative containers}}
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_assume_aligned
  header_list: memory
  rows:
  - value: 201811
    papers: P1007R3
    cppreference-description: '{{lc|std::assume_aligned}}'
  support:
    clang:
    - since: C++20
      value: 201811
    gcc:
    - since: C++20
      value: 201811
    msvc:
    - since: C++20
      value: 201811
- name: __cpp_lib_atomic_flag_test
  header_list: atomic
  rows:
  - value: 201907
    papers: P1135R6
    cppreference-description: '{{lc|std::atomic_flag::test}}'
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_atomic_float
  header_list: atomic
  rows:
  - value: 201711
    papers: P0020R6
    cppreference-description: '[[cpp/atomic/atomic|Floating-point atomic]]'
  support:
    clang: null
    gcc:
    - since: C++20
      value: 201711
    msvc:
    - since: C++20
      value: 201711
- name: __cpp_lib_atomic_is_always_lock_free
  header_list: atomic
  rows:
  - value: 201603
    papers: P0152R1
    cppreference-description: '{{ltt|cpp/atomic/atomic/is_always_lock_free|constexpr
      atomic<T>::is_always_lock_free}}'
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_lib_atomic_lock_free_type_aliases
  header_list: atomic
  rows:
  - value: 201907
    papers: P1135R6
    cppreference-description: atomic lockfree integral types ({{lc|std::atomic_signed_lock_free}},
      {{lc|std::atomic_unsigned_lock_free}})
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      depends: (__GCC_ATOMIC_INT_LOCK_FREE | __GCC_ATOMIC_LONG_LOCK_FREE | __GCC_ATOMIC_CHAR_LOCK_FREE)
        & 2
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_atomic_min_max
  header_list: atomic
  rows:
  - value: 202403
    papers: P0493R5
    cppreference-description: Atomic minimum/maximum ({{ltt|cpp/atomic/atomic/fetch_min|std::atomic::fetch_min}},
      {{ltt|cpp/atomic/atomic/fetch_max|std::atomic::fetch_max}}, etc)
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_atomic_ref
  header_list: atomic
  rows:
  - value: 201806
    papers: P0019R8
    cppreference-description: '{{ltt|cpp/atomic/atomic_ref|std::atomic_ref}}'
  support:
    clang:
    - since: C++20
      value: 201806
    gcc:
    - since: C++20
      value: 201806
    msvc:
    - since: C++20
      value: 201806
- name: __cpp_lib_atomic_shared_ptr
  header_list: memory
  rows:
  - value: 201711
    papers: P0718R2
    cppreference-description: '{{ltt|cpp/memory/shared_ptr/atomic2|std::atomic<std::shared_ptr>}}'
  support:
    clang: null
    gcc:
    - since: C++20
      value: 201711
    msvc:
    - since: C++20
      value: 201711
- name: __cpp_lib_atomic_value_initialization
  header_list: atomic memory
  rows:
  - value: 201911
    papers: P0883R2
    cppreference-description: Fixing atomic initialization (value-initialize {{lc|std::atomic}}
      by default)
  support:
    clang:
    - since: C++20
      value: 201911
    gcc:
    - since: C++20
      value: 201911
    msvc:
    - value: 201911
- name: __cpp_lib_atomic_wait
  header_list: atomic
  rows:
  - value: 201907
    papers: P1135R6
    cppreference-description: Efficient {{lc|std::atomic}} waiting
  support:
    clang:
    - since: C++20
      depends: _LIBCPP_AVAILABILITY_HAS_SYNC
      value: 201907
    gcc:
    - since: C++20
      depends: '!defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_HAVE_LINUX_FUTEX)'
      value: 201907
    - since: C++20
      depends: defined(_GLIBCXX_HAS_GTHREADS)
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_barrier
  header_list: barrier
  rows:
  - value: 201907
    papers: P1135R6
    cppreference-description: '{{ltt|cpp/thread/barrier|std::barrier}}'
  - value: 202302
    papers: P2588R3
    cppreference-description: '{{ltt|cpp/thread/barrier|std::barrier}}''s phase completion
      guarantees'
  support:
    clang:
    - since: C++20
      depends: '!defined(_LIBCPP_HAS_NO_THREADS) && _LIBCPP_AVAILABILITY_HAS_SYNC'
      value: 201907
    gcc:
    - since: C++20
      depends: __cpp_aligned_new && __cpp_lib_atomic_wait
      value: 201907
    msvc:
    - since: C++20
      value: 202302
- name: __cpp_lib_bind_back
  header_list: functional
  rows:
  - value: 202202
    papers: P2387R3
    cppreference-description: '{{lc|std::bind_back}}'
  - value: 202306
    papers: P2714R1
    cppreference-description: Allow passing callable objects as non-type template
      arguments to {{lc|std::bind_back}}
  support:
    clang:
    - since: C++23
      value: 202202
    gcc:
    - since: C++23
      depends: __cpp_explicit_this_parameter
      value: 202202
    msvc:
    - since: C++23
      value: 202202
- name: __cpp_lib_bind_front
  header_list: functional
  rows:
  - value: 201811
    papers: P0356R5
  - value: 201907
    papers: P1651R0
    cppreference-description: '{{ltt|cpp/utility/functional/bind_front|std::bind_front}}'
  - value: 202306
    papers: P2714R1
    cppreference-description: Allow passing callable objects as non-type template
      arguments to {{lc|std::bind_front}}
  support:
    clang:
    - since: C++20
      value: 201907
    - since: C++26
      value: 202306
    gcc:
    - since: C++20
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_bit_cast
  header_list: bit
  rows:
  - value: 201806
    papers: P0476R2
    cppreference-description: '{{ltt|cpp/numeric/bit_cast|std::bit_cast}}'
  support:
    clang:
    - since: C++20
      value: 201806
    gcc:
    - since: C++20
      depends: __has_builtin(__builtin_bit_cast)
      value: 201806
    msvc:
    - since: C++20
      value: 201806
- name: __cpp_lib_bitops
  header_list: bit
  rows:
  - value: 201907
    papers: P0553R4
    cppreference-description: '[[cpp/numeric#Bit_manipulation_(since_C++20)|Bit operations]]'
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_bitset
  header_list: bitset
  rows:
  - value: 202306
    papers: P2697R1
    cppreference-description: Interfacing {{lc|std::bitset}} with {{lc|std::string_view}}
  support:
    clang:
    - since: C++26
      value: 202306
    gcc: null
    msvc: null
- name: __cpp_lib_bool_constant
  header_list: type_traits
  rows:
  - value: 201505
    papers: N4389
    cppreference-description: '{{lc|std::bool_constant}}'
  support:
    clang:
    - since: C++17
      value: 201505
    gcc:
    - since: C++17
      value: 201505
    msvc:
    - value: 201505
- name: __cpp_lib_bounded_array_traits
  header_list: type_traits
  rows:
  - value: 201902
    papers: P1357R1
    cppreference-description: '{{ltt|cpp/types/is_bounded_array|std::is_bounded_array}},
      {{ltt|cpp/types/is_unbounded_array|std::is_unbounded_array}}'
  support:
    clang:
    - since: C++20
      value: 201902
    gcc:
    - since: C++20
      value: 201902
    msvc:
    - since: C++20
      value: 201902
- name: __cpp_lib_boyer_moore_searcher
  header_list: functional
  rows:
  - value: 201603
    papers: P0220R1
    cppreference-description: '[[cpp/utility/functional#Searchers|Searchers]]'
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_lib_byte
  header_list: cstddef
  rows:
  - value: 201603
    papers: P0298R3
    cppreference-description: '{{ltt|cpp/types/byte|std::byte}}'
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      depends: _HAS_STD_BYTE
      value: 201603
- name: __cpp_lib_byteswap
  header_list: bit
  rows:
  - value: 202110
    papers: P1272R4
    cppreference-description: '{{ltt|cpp/numeric/byteswap|std::byteswap}}'
  support:
    clang:
    - since: C++23
      value: 202110
    gcc:
    - since: C++23
      value: 202110
    msvc:
    - since: C++23
      value: 202110
- name: __cpp_lib_char8_t
  header_list: atomic filesystem istream limits locale ostream string string_view
  rows:
  - value: 201811
    papers: P0482R6
  - value: 201907
    papers: P1423R3
    cppreference-description: Library support for {{ltt|cpp/language/types#char8_t|char8_t}}
  support:
    clang:
    - since: C++20
      depends: '!defined(_LIBCPP_HAS_NO_CHAR8_T)'
      value: 201907
    gcc:
    - depends: defined(__cpp_char8_t)
      value: 201907
    - depends: defined(_GLIBCXX_USE_CHAR8_T)
      value: 201907
    msvc:
    - depends: defined(__cpp_char8_t)
      value: 201907
- name: __cpp_lib_chrono
  header_list: chrono
  rows:
  - value: 201510
    papers: P0092R1
    cppreference-description: Rounding functions for {{lc|std::chrono::duration}}
      and {{lc|std::chrono::time_point}}
  - value: 201611
    papers: P0505R0
    cppreference-description: Constexpr for all the member functions of {{lc|std::chrono::duration}}
      and {{lc|std::chrono::time_point}}
  - value: 201803
    papers: P0355R7
  - value: 201907
    papers: P1466R3
    cppreference-description: '[[cpp/chrono#Calendar|Calendars]] and [[cpp/chrono#Time
      zone|Time Zones]]'
  - value: 202306
    papers: P2592R3
    cppreference-description: '[[cpp/utility/hash|Hashing]] support for {{ltt std|cpp/chrono}}
      value classes'
  support:
    clang:
    - since: C++17
      value: 201611
    gcc:
    - since: C++17
      value: 201611
    - since: C++20
      depends: _GLIBCXX_USE_CXX11_ABI
      value: 201907
    msvc:
    - value: 201510
    - since: C++17
      value: 201611
    - since: C++20
      value: 201907
- name: __cpp_lib_chrono_udls
  header_list: chrono
  rows:
  - value: 201304
    papers: N3642
    cppreference-description: '[[cpp/chrono/duration#Literals|User-defined literals
      for time types]]'
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_lib_clamp
  header_list: algorithm
  rows:
  - value: 201603
    papers: P0025R0
    cppreference-description: '{{lc|std::clamp}}'
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_lib_common_reference
  header_list: type_traits
  rows:
  - value: 202302
    papers: P2655R3
    cppreference-description: Make {{lc|std::common_reference_t}} of {{lc|std::reference_wrapper}}
      a reference type
  support:
    clang: null
    gcc: null
    msvc:
    - since: C++20
      value: 202302
- name: __cpp_lib_common_reference_wrapper
  header_list: functional
  rows:
  - value: 202302
    papers: P2655R3
    cppreference-description: Make {{lc|std::common_reference_t}} of {{lc|std::reference_wrapper}}
      a reference type
  support:
    clang: null
    gcc: null
    msvc:
    - since: C++20
      value: 202302
- name: __cpp_lib_complex_udls
  header_list: complex
  rows:
  - value: 201309
    papers: N3779
    cppreference-description: '[[cpp/numeric/complex/operator""i|User-defined Literals
      for {{tt|std::complex}}]]'
  support:
    clang:
    - since: C++14
      value: 201309
    gcc:
    - since: C++14
      value: 201309
    msvc:
    - value: 201309
- name: __cpp_lib_concepts
  header_list: compare concepts
  rows:
  - value: 201806
    papers: P0898R3
  - value: 201907
    papers: P1754R1
  - value: 202002
    papers: P1964R2
    cppreference-description: '[[cpp/concepts|Standard library concepts]]'
    cppreference-header_list: concepts
  - value: 202207
    papers: P2404R3
    cppreference-description: Move-only types for {{lconcept|equality_comparable_with}},
      {{lconcept|totally_ordered_with}}, and {{lconcept|three_way_comparable_with}}
  support:
    clang:
    - since: C++20
      value: 202002
    gcc:
    - since: C++20
      depends: __cpp_concepts >= 201907L
      value: 202002
    msvc:
    - since: C++20
      value: 202002
    - since: C++23
      value: 202207
- name: __cpp_lib_constexpr_algorithms
  header_list: algorithm utility
  rows:
  - value: 201703
    papers: P0202R3
  - value: 201806
    papers: P0879R0 LWG3256 LWG3792
    cppreference-description: Constexpr for [[cpp/algorithm|algorithms]]
  - value: 202306
    papers: P2562R1
    cppreference-description: Constexpr stable sorting
  support:
    clang:
    - since: C++20
      value: 201806
    gcc:
    - since: C++20
      value: 201806
    msvc:
    - since: C++20
      value: 201806
- name: __cpp_lib_constexpr_bitset
  header_list: bitset
  rows:
  - value: 202207
    papers: P2417R2
    cppreference-description: A more constexpr {{lc|std::bitset}}
  support:
    clang:
    - since: C++23
      value: 202207
    gcc:
    - since: C++23
      depends: __cpp_constexpr_dynamic_alloc
      value: 202202
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_constexpr_charconv
  header_list: charconv
  rows:
  - value: 202207
    papers: P2291R3
    cppreference-description: Add {{tt|constexpr}} modifiers to functions {{lc|std::to_chars}}
      and {{lc|std::from_chars}} for integral types
  support:
    clang:
    - since: C++23
      value: 202207
    gcc:
    - since: C++23
      value: 202207
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_constexpr_cmath
  header_list: cmath cstdlib
  rows:
  - value: 202202
    papers: P0533R9
    cppreference-description: Constexpr for mathematical functions in {{header|cmath}}
      and {{header|cstdlib}}
  - value: 202306
    papers: P1383R2
    cppreference-description: More constexpr for {{header|cmath}}
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_constexpr_complex
  header_list: complex
  rows:
  - value: 201711
    papers: P0415R1
    cppreference-description: Constexpr for {{lc|std::complex}}
  - value: 202306
    papers: P1383R2
    cppreference-description: More constexpr for {{header|complex}}
  support:
    clang:
    - since: C++20
      value: 201711
    gcc:
    - since: C++20
      value: 201711
    msvc:
    - since: C++20
      value: 201711
- name: __cpp_lib_constexpr_dynamic_alloc
  header_list: memory
  rows:
  - value: 201907
    papers: P0784R7
    cppreference-description: Constexpr for {{lc|std::allocator}} and related utilities
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_constexpr_functional
  header_list: functional
  rows:
  - value: 201811
    papers: P1032R1
  - value: 201907
    papers: P1065R2
    cppreference-description: Misc constexpr bits ({{lc|std::default_searcher}});
      constexpr {{tt|INVOKE}}
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_constexpr_iterator
  header_list: iterator
  rows:
  - value: 201811
    papers: P1032R1
    cppreference-description: Misc constexpr bits ({{lc|std::insert_iterator}} et
      al.)
  support:
    clang:
    - since: C++20
      value: 201811
    gcc:
    - since: C++20
      value: 201811
    msvc:
    - since: C++20
      value: 201811
- name: __cpp_lib_constexpr_memory
  header_list: memory
  rows:
  - value: 201811
    papers: P1006R1
    cppreference-description: Constexpr in {{lc|std::pointer_traits}}
  - value: 202202
    papers: P2273R3
    cppreference-description: Constexpr {{lc|std::unique_ptr}}
  support:
    clang:
    - since: C++20
      value: 201811
    - since: C++23
      value: 202202
    gcc:
    - since: C++20
      value: 201811
    - since: C++23
      depends: __cpp_constexpr_dynamic_alloc
      value: 202202
    msvc:
    - since: C++20
      value: 201811
    - since: C++23
      value: 202202
- name: __cpp_lib_constexpr_new
  header_list: new
  rows:
  - value: 202406
    papers: P2747R2
    cppreference-description: '{{c/core|constexpr}} [[cpp/language/new#Placement new|placement]]
      {{ltt|cpp/memory/new/operator new|new}}'
  support:
    clang: null
    gcc:
    - since: C++26
      depends: __cpp_constexpr >= 202406L
      value: 202406
    msvc: null
- name: __cpp_lib_constexpr_numeric
  header_list: numeric
  rows:
  - value: 201911
    papers: P1645R1
    cppreference-description: Constexpr for [[cpp/algorithm#Numeric operations|algorithms]]
      in {{header|numeric}}
  support:
    clang:
    - since: C++20
      value: 201911
    gcc:
    - since: C++20
      value: 201911
    msvc:
    - since: C++20
      value: 201911
- name: __cpp_lib_constexpr_string
  header_list: string
  rows:
  - value: 201611
    papers: P0426R1
  - value: 201811
    papers: P1032R1
  - value: 201907
    papers: P0980R1
    cppreference-description: Constexpr for {{lc|std::string}}
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++17
      depends: _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED
      value: 201611
    - since: C++20
      depends: '!_GLIBCXX_USE_CXX11_ABI && defined(__cpp_lib_is_constant_evaluated)'
      value: 201811
    - since: C++20
      depends: _GLIBCXX_USE_CXX11_ABI && defined(__cpp_lib_is_constant_evaluated)
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_constexpr_string_view
  header_list: string_view
  rows:
  - value: 201611
    papers: P0426R1
  - value: 201811
    papers: P1032R1
    cppreference-description: Misc constexpr bits ({{lc|std::string_view::copy}})
  support:
    clang:
    - since: C++20
      value: 201811
    gcc:
    - since: C++20
      value: 201811
    msvc:
    - since: C++20
      value: 201811
- name: __cpp_lib_constexpr_tuple
  header_list: tuple
  rows:
  - value: 201811
    papers: P1032R1
    cppreference-description: Misc constexpr bits ({{lc|1=std::tuple::operator=}}
      et al.)
  support:
    clang:
    - since: C++20
      value: 201811
    gcc:
    - since: C++20
      value: 201811
    msvc:
    - since: C++20
      value: 201811
- name: __cpp_lib_constexpr_typeinfo
  header_list: typeinfo
  rows:
  - value: 202106
    papers: P1328R1
    cppreference-description: Constexpr for {{lc|1=std::type_info::operator==}}
  support:
    clang:
    - since: C++23
      value: 202106
    gcc:
    - since: C++23
      value: 202106
    msvc:
    - since: C++23
      value: 202106
- name: __cpp_lib_constexpr_utility
  header_list: utility
  rows:
  - value: 201811
    papers: P1032R1
    cppreference-description: Misc constexpr bits ({{lc|1=std::pair::operator=}} et
      al.)
  support:
    clang:
    - since: C++20
      value: 201811
    gcc:
    - since: C++20
      value: 201811
    msvc:
    - since: C++20
      value: 201811
- name: __cpp_lib_constexpr_vector
  header_list: vector
  rows:
  - value: 201907
    papers: P1004R2
    cppreference-description: Constexpr for {{lc|std::vector}}
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_constrained_equality
  header_list: optional tuple utility variant
  rows:
  - value: 202403
    papers: P2944R3
    cppreference-description: Constrained relational operators for {{lc|std::pair}},
      {{lc|std::tuple}}, {{lc|std::optional}}, and {{lc|std::variant}}
  support:
    clang: null
    gcc:
    - since: C++20
      depends: __cpp_lib_three_way_comparison
      value: 202403
    msvc: null
- name: __cpp_lib_containers_ranges
  header_list: vector list forward_list map set unordered_map unordered_set deque
    queue stack string
  rows:
  - value: 202202
    papers: P1206R7
    cppreference-description: '[[cpp/ranges/to#container compatible range|Ranges-aware]]
      construction and insertion for containers and strings'
  support:
    clang:
    - since: C++23
      value: 202202
    gcc: null
    msvc:
    - since: C++23
      value: 202202
- name: __cpp_lib_copyable_function
  header_list: functional
  rows:
  - value: 202306
    papers: P2548R6
    cppreference-description: '{{lc|std::copyable_function}}'
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_coroutine
  header_list: coroutine
  rows:
  - value: 201902
    papers: P0912R5 LWG3393
    cppreference-description: '[[cpp/language/coroutines|Coroutines]] (library support)'
  support:
    clang:
    - since: C++20
      value: 201902
    gcc:
    - since: C++14
      depends: __cpp_impl_coroutine
      value: 201902
    msvc:
    - depends: defined(__cpp_impl_coroutine)
      value: 201902
- name: __cpp_lib_debugging
  header_list: debugging
  rows:
  - value: 202311
    papers: P2546R5
    cppreference-description: '[[cpp/utility#Debugging support|Debugging support]]'
  - value: 202403
    papers: P2810R4
    cppreference-description: Replaceable {{ltt|cpp/utility/is_debugger_present|std::is_debugger_present}}
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_deduction_guides
  rows:
  - value: 201703
    papers: P0433R2
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_destroying_delete
  header_list: new
  rows:
  - value: 201806
    papers: P0722R3
    cppreference-description: '[[cpp/memory/new/operator_delete|Destroying {{tt|operator
      delete}}]] (library support)'
  support:
    clang:
    - since: C++20
      depends: defined(__cpp_impl_destroying_delete) && __cpp_impl_destroying_delete
        >= 201806L
      value: 201806
    gcc:
    - since: C++20
      depends: __cpp_impl_destroying_delete
      value: 201806
    msvc:
    - since: C++20
      value: 201806
- name: __cpp_lib_enable_shared_from_this
  header_list: memory
  rows:
  - value: 201603
    papers: P0033R1
    cppreference-description: '{{lc|std::enable_shared_from_this::weak_from_this}}'
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - value: 201603
- name: __cpp_lib_endian
  header_list: bit
  rows:
  - value: 201907
    papers: P0463R1 P1612R1
    cppreference-description: '{{lc|std::endian}}'
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_erase_if
  header_list: string deque forward_list list vector map set unordered_map unordered_set
  rows:
  - value: 201811
    papers: P1209R0
  - value: 202002
    papers: P1115R3
    cppreference-description: Uniform container erasure
  support:
    clang:
    - since: C++20
      value: 202002
    gcc:
    - since: C++20
      value: 202002
    msvc:
    - since: C++20
      value: 202002
- name: __cpp_lib_exchange_function
  header_list: utility
  rows:
  - value: 201304
    papers: N3668
    cppreference-description: '{{lc|std::exchange}}'
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_lib_execution
  header_list: execution
  rows:
  - value: 201603
    papers: P0024R2
    cppreference-description: '[[cpp/algorithm#Execution_policies|Execution policies]]'
  - value: 201902
    papers: P1001R2
    cppreference-description: '{{ltt|cpp/algorithm/execution_policy_tag_t|std::execution::unsequenced_policy}}'
  support:
    clang: null
    gcc:
    - since: C++17
      value: 201902
    msvc:
    - since: C++17
      value: 201603
    - since: C++20
      value: 201902
- name: __cpp_lib_expected
  header_list: expected
  rows:
  - value: 202202
    papers: P0323R12
    cppreference-description: class template {{lc|std::expected}}
  - value: 202211
    papers: P2505R5
    cppreference-description: Monadic functions for {{lc|std::expected}}
  support:
    clang:
    - since: C++23
      value: 202211
    gcc:
    - since: C++23
      depends: __cpp_concepts >= 202002L
      value: 202211
    msvc:
    - since: C++23
      value: 202211
- name: __cpp_lib_filesystem
  header_list: filesystem
  rows:
  - value: 201603
    papers: P0218R1
  - value: 201606
    papers: P0219R1 P0392R0
  - value: 201703
    papers: P0317R1
    cppreference-description: '[[cpp/filesystem|Filesystem library]]'
  support:
    clang:
    - since: C++17
      depends: '!defined(_LIBCPP_HAS_NO_FILESYSTEM) && _LIBCPP_AVAILABILITY_HAS_FILESYSTEM_LIBRARY'
      value: 201703
    gcc:
    - since: C++17
      value: 201703
    msvc:
    - since: C++17
      value: 201703
- name: __cpp_lib_flat_map
  header_list: flat_map
  rows:
  - value: 202207
    papers: P0429R9
    cppreference-description: '{{ltt|cpp/container/flat_map|std::flat_map}} and {{ltt|cpp/container/flat_multimap|std::flat_multimap}}'
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_flat_set
  header_list: flat_set
  rows:
  - value: 202207
    papers: P1222R4 LWG3751
    cppreference-description: '{{ltt|cpp/container/flat_set|std::flat_set}} and {{ltt|cpp/container/flat_multiset|std::flat_multiset}}<!--LWG
      3751-->'
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_format
  header_list: format
  rows:
  - value: 201907
    papers: P0645R10 P1361R2 P1652R1
    cppreference-description: '[[cpp/utility/format|Text formatting]]'
  - value: 202106
    papers: P2216R3
    cppreference-description: Compile-time format string checks; Reducing parameterization
      of {{lc|std::vformat_to}}
    cppreference-treats-as-dr-against: C++20
  - value: 202110
    papers: P2372R3 P2418R2
    cppreference-description: Fixing locale handling in chrono formatters; Supporting
      non-const-formattable types
    cppreference-treats-as-dr-against: C++20
  - value: 202207
    papers: P2419R2 P2508R1
    cppreference-description: Exposing {{ltt|cpp/utility/format/basic_format_string|std::basic_format_string}};
      clarify handling of encodings in localized formatting of chrono types
  - value: 202304
    papers: P2510R3
    cppreference-description: Formatting pointers
  - value: 202305
    papers: P2757R3
    cppreference-description: Type-checking format args
  - value: 202306
    papers: P2637R3
    cppreference-description: Member {{ltt|cpp/utility/format/basic_format_arg|visit}}
  - value: 202311
    papers: P2918R2
    cppreference-description: '[[cpp/utility/format/runtime_format|Runtime format
      strings]]'
  support:
    clang:
    - since: C++20
      value: 202110
    gcc:
    - since: C++20
      value: 202304
    - since: C++26
      value: 202311
    msvc:
    - since: C++20
      value: 202304
- name: __cpp_lib_format_path
  header_list: filesystem
  rows:
  - value: 202403
    papers: P2845R8
    cppreference-description: Formatting of {{lc|std::filesystem::path}}
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_format_ranges
  header_list: format
  rows:
  - value: 202207
    papers: P2286R8 P2585R1 LWG3750
    cppreference-description: Formatting ranges
  support:
    clang:
    - since: C++23
      value: 202207
    gcc: null
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_format_uchar
  header_list: format
  rows:
  - value: 202311
    papers: P2909R4
    cppreference-description: Fix formatting of code units as integers
  support:
    clang:
    - since: C++20
      value: 202311
    gcc:
    - since: C++20
      value: 202311
    msvc:
    - since: C++20
      value: 202311
- name: __cpp_lib_formatters
  header_list: stacktrace thread
  rows:
  - value: 202302
    papers: P2693R1
    cppreference-description: Formatting {{lc|std::thread::id}} and {{ltt|cpp/utility/basic_stacktrace|std::stacktrace}}
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202302
    msvc:
    - since: C++23
      value: 202302
- name: __cpp_lib_forward_like
  header_list: utility
  rows:
  - value: 202207
    papers: P2445R1
    cppreference-description: '{{ltt|cpp/utility/forward_like|std::forward_like}}'
  support:
    clang:
    - since: C++23
      value: 202207
    gcc:
    - since: C++23
      value: 202207
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_freestanding_algorithm
  header_list: algorithm
  rows:
  - value: 202311
    papers: P2407R5
    cppreference-description: Freestanding facilities in {{header|algorithm}}
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202311
    msvc:
    - value: 202311
- name: __cpp_lib_freestanding_array
  header_list: array
  rows:
  - value: 202311
    papers: P2407R5
    cppreference-description: Make parts of {{lc|std::array}} freestanding
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202311
    msvc:
    - value: 202311
- name: __cpp_lib_freestanding_char_traits
  header_list: string
  rows:
  - value: 202306
    papers: P2338R4
    cppreference-description: Freestanding {{lc|std::char_traits}}
  support:
    clang: null
    gcc: null
    msvc:
    - value: 202306
- name: __cpp_lib_freestanding_charconv
  header_list: charconv
  rows:
  - value: 202306
    papers: P2338R4
    cppreference-description: Freestanding facilities in {{header|charconv}}
  support:
    clang: null
    gcc: null
    msvc:
    - since: C++17
      value: 202306
- name: __cpp_lib_freestanding_cstdlib
  header_list: cmath cstdlib
  rows:
  - value: 202306
    papers: P2338R4
    cppreference-description: Freestanding facilities in {{header|cstdlib}}
  support:
    clang: null
    gcc: null
    msvc:
    - value: 202306
- name: __cpp_lib_freestanding_cstring
  header_list: cstring
  rows:
  - value: 202306
    papers: P2338R4
    cppreference-description: Freestanding facilities in {{header|cstring}}
  - value: 202311
    papers: P2937R0
    cppreference-description: Removing {{lc|std::strtok}} from freestanding facilities
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202311
    msvc:
    - value: 202311
- name: __cpp_lib_freestanding_cwchar
  header_list: cwchar
  rows:
  - value: 202306
    papers: P2338R4
    cppreference-description: Freestanding facilities in {{header|cwchar}}
  support:
    clang: null
    gcc: null
    msvc:
    - value: 202306
- name: __cpp_lib_freestanding_errc
  header_list: cerrno system_error
  rows:
  - value: 202306
    papers: P2338R4
    cppreference-description: Freestanding {{lc|std::errc}}
  support:
    clang: null
    gcc: null
    msvc:
    - value: 202306
- name: __cpp_lib_freestanding_expected
  header_list: expected
  rows:
  - value: 202311
    papers: P2833R2
    cppreference-description: Make parts of {{lc|std::expected}} freestanding
  support:
    clang: null
    gcc:
    - since: C++23
      depends: __cpp_lib_expected
      value: 202311
    msvc:
    - since: C++23
      value: 202311
- name: __cpp_lib_freestanding_feature_test_macros
  rows:
  - value: 202306
    papers: P2198R7
    cppreference-description: Support for freestanding feature-test macros
  support:
    clang: null
    gcc: null
    msvc:
    - value: 202306
- name: __cpp_lib_freestanding_functional
  header_list: functional
  rows:
  - value: 202306
    papers: P2198R7
    cppreference-description: Freestanding facilities in {{header|functional}}
  support:
    clang: null
    gcc: null
    msvc:
    - value: 202306
- name: __cpp_lib_freestanding_iterator
  header_list: iterator
  rows:
  - value: 202306
    papers: P2198R7
    cppreference-description: Freestanding facilities in {{header|iterator}}
  support:
    clang: null
    gcc: null
    msvc:
    - value: 202306
- name: __cpp_lib_freestanding_mdspan
  header_list: mdspan
  rows:
  - value: 202311
    papers: P2833R2
    cppreference-description: Freestanding {{lc|std::mdspan}}
  support:
    clang: null
    gcc: null
    msvc:
    - since: C++23
      value: 202311
- name: __cpp_lib_freestanding_memory
  header_list: memory
  rows:
  - value: 202306
    papers: P2198R7
    cppreference-description: Freestanding facilities in {{header|memory}}
  support:
    clang: null
    gcc: null
    msvc:
    - value: 202306
- name: __cpp_lib_freestanding_numeric
  header_list: numeric
  rows:
  - value: 202311
    papers: P0543R3
    cppreference-description: Freestanding facilities in {{header|numeric}} (saturation
      arithmetic)
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_freestanding_operator_new
  header_list: new
  rows:
  - value: 202306
    papers: P2198R7
    cppreference-description: Definition of {{lc|operator new}} (optional in freestanding
      implementations)
  support:
    clang: null
    gcc: null
    msvc:
    - value: 202306
- name: __cpp_lib_freestanding_optional
  header_list: optional
  rows:
  - value: 202311
    papers: P2407R5
    cppreference-description: Making parts of {{lc|std::optional}} freestanding
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202311
    msvc:
    - since: C++17
      value: 202311
- name: __cpp_lib_freestanding_ranges
  header_list: ranges
  rows:
  - value: 202306
    papers: P2198R7
    cppreference-description: Freestanding facilities in {{header|ranges}}
  support:
    clang: null
    gcc: null
    msvc:
    - since: C++20
      value: 202306
- name: __cpp_lib_freestanding_ratio
  header_list: ratio
  rows:
  - value: 202306
    papers: P2198R7
    cppreference-description: Freestanding facilities in {{header|ratio}}
  support:
    clang: null
    gcc: null
    msvc:
    - value: 202306
- name: __cpp_lib_freestanding_string_view
  header_list: string_view
  rows:
  - value: 202311
    papers: P2407R5
    cppreference-description: Making parts of {{lc|std::string_view}} freestanding
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202311
    msvc:
    - since: C++17
      value: 202311
- name: __cpp_lib_freestanding_tuple
  header_list: tuple
  rows:
  - value: 202306
    papers: P2198R7
    cppreference-description: Freestanding facilities in {{header|tuple}}
  support:
    clang: null
    gcc: null
    msvc:
    - value: 202306
- name: __cpp_lib_freestanding_utility
  header_list: utility
  rows:
  - value: 202306
    papers: P2198R7
    cppreference-description: Freestanding facilities in {{header|utility}}
  support:
    clang: null
    gcc: null
    msvc:
    - value: 202306
- name: __cpp_lib_freestanding_variant
  header_list: variant
  rows:
  - value: 202311
    papers: P2407R5
    cppreference-description: Making parts of {{lc|std::variant}} freestanding
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202311
    msvc:
    - since: C++17
      value: 202311
- name: __cpp_lib_fstream_native_handle
  header_list: fstream
  rows:
  - value: 202306
    papers: P1759R6
    cppreference-description: Obtaining native handles from file streams
  support:
    clang:
    - since: C++26
      depends: '!defined(_LIBCPP_HAS_NO_FILESYSTEM) && !defined(_LIBCPP_HAS_NO_LOCALIZATION)'
      value: 202306
    gcc:
    - since: C++26
      value: 202306
    msvc: null
- name: __cpp_lib_function_ref
  header_list: functional
  rows:
  - value: 202306
    papers: P0792R14
    cppreference-description: '{{lc|std::function_ref}}: a type-erased callable reference'
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_gcd_lcm
  header_list: numeric
  rows:
  - value: 201606
    papers: P0295R0
    cppreference-description: '{{lc|std::gcd}}, {{lc|std::lcm}}'
  support:
    clang:
    - since: C++17
      value: 201606
    gcc:
    - since: C++17
      value: 201606
    msvc:
    - since: C++17
      value: 201606
- name: __cpp_lib_generator
  header_list: generator
  rows:
  - value: 202207
    papers: P2502R2
    cppreference-description: '{{lc|std::generator}}: synchronous coroutine generator
      for ranges'
  support:
    clang: null
    gcc:
    - since: C++23
      depends: __cpp_lib_coroutine && __cpp_sized_deallocation
      value: 202207
    msvc: null
- name: __cpp_lib_generic_associative_lookup
  header_list: map set
  rows:
  - value: 201304
    papers: N3657
    cppreference-description: Heterogeneous comparison lookup in {{lsd|cpp/container#Associative
      containers}}
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_lib_generic_unordered_hash_lookup
  header_info: '[`<unordered_map>` `<unordered_set>`]{.rm}'
  rows:
  - value: 201902
    papers: P0920R2
  - value: 201907
    papers: P1661R1
    removed: true
- name: __cpp_lib_generic_unordered_lookup
  header_list: unordered_map unordered_set
  rows:
  - value: 201811
    papers: P0919R3
    cppreference-description: Heterogeneous comparison lookup in {{lsd|cpp/container#Unordered
      associative containers}}
  support:
    clang:
    - since: C++20
      value: 201811
    gcc:
    - since: C++20
      value: 201811
    msvc:
    - since: C++20
      value: 201811
- name: __cpp_lib_hardware_interference_size
  header_list: new
  rows:
  - value: 201703
    papers: P0154R1
    cppreference-description: '{{ltt|cpp/thread/hardware_destructive_interference_size|constexpr
      std::hardware_{constructive, destructive}_interference_size}}'
  support:
    clang:
    - since: C++17
      depends: defined(__GCC_DESTRUCTIVE_SIZE) && defined(__GCC_CONSTRUCTIVE_SIZE)
      value: 201703
    gcc:
    - since: C++17
      depends: defined(__GCC_DESTRUCTIVE_SIZE)
      value: 201703
    msvc:
    - since: C++17
      value: 201703
- name: __cpp_lib_has_unique_object_representations
  header_list: type_traits
  rows:
  - value: 201606
    papers: P0258R2
    cppreference-description: '{{lc|std::has_unique_object_representations}}'
  support:
    clang:
    - since: C++17
      value: 201606
    gcc:
    - since: C++17
      depends: defined(_GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP)
      value: 201606
    msvc:
    - since: C++17
      value: 201606
- name: __cpp_lib_hazard_pointer
  header_list: hazard_pointer
  rows:
  - value: 202306
    papers: P2530R3
    cppreference-description: Hazard pointers
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_hypot
  header_list: cmath
  rows:
  - value: 201603
    papers: P0030R1
    cppreference-description: 3-argument overload of {{lc|std::hypot}}
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_lib_incomplete_container_elements
  header_list: forward_list list vector
  rows:
  - value: 201505
    papers: N4510
    cppreference-description: Minimal incomplete type support for [[cpp/container/forward_list#Template
      parameters|std::forward_list]], [[cpp/container/list#Template parameters|std::list]],
      and [[cpp/container/vector#Template parameters|std::vector]]
  support:
    clang:
    - since: C++17
      value: 201505
    gcc:
    - value: 201505
    msvc:
    - value: 201505
- name: __cpp_lib_inplace_vector
  header_list: inplace_vector
  rows:
  - value: 202406
    papers: P0843R14
    cppreference-description: '{{lc|std::inplace_vector}}: dynamically-resizable vector
      with fixed capacity (inplace storage)'
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_int_pow2
  header_list: bit
  rows:
  - value: 201806
    papers: P0556R3
  - value: 202002
    papers: P1956R1
    cppreference-description: '[[cpp/numeric#Bit_manipulation_(since_C++20)|Integral
      power-of-2 operations]] ({{lc|std::has_single_bit}}, {{lc|std::bit_ceil}}, {{lc|std::bit_floor}},
      {{lc|std::bit_width}})'
  support:
    clang:
    - since: C++20
      value: 202002
    gcc:
    - since: C++20
      value: 202002
    msvc:
    - since: C++20
      value: 202002
- name: __cpp_lib_integer_comparison_functions
  header_list: utility
  rows:
  - value: 202002
    papers: P0586R2
    cppreference-description: '[[cpp/utility#Integer_comparison_functions|Integer
      comparison functions]]'
  support:
    clang:
    - since: C++20
      value: 202002
    gcc:
    - since: C++20
      value: 202002
    msvc:
    - since: C++20
      value: 202002
- name: __cpp_lib_integer_sequence
  header_list: utility
  rows:
  - value: 201304
    papers: N3658
    cppreference-description: '[[cpp/utility/integer_sequence|Compile-time integer
      sequences]]'
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_lib_integral_constant_callable
  header_list: type_traits
  rows:
  - value: 201304
    papers: N3545
    cppreference-description: '{{lc|std::integral_constant|std::integral_constant::operator()}}'
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_lib_interpolate
  header_list: cmath numeric
  rows:
  - value: 201902
    papers: P0811R3
    cppreference-description: '{{ltt|cpp/numeric/lerp|std::lerp}}, {{ltt|cpp/numeric/midpoint|std::midpoint}}'
  support:
    clang:
    - since: C++20
      value: 201902
    gcc:
    - since: C++20
      value: 201902
    msvc:
    - since: C++20
      value: 201902
- name: __cpp_lib_invoke
  header_list: functional
  rows:
  - value: 201411
    papers: N4169
    cppreference-description: '{{lc|std::invoke}}'
  support:
    clang:
    - since: C++17
      value: 201411
    gcc:
    - since: C++17
      value: 201411
    msvc:
    - value: 201411
- name: __cpp_lib_invoke_r
  header_list: functional
  rows:
  - value: 202106
    papers: P2136R3
    cppreference-description: '{{ltt|cpp/utility/functional/invoke|std::invoke_r}}'
  support:
    clang:
    - since: C++23
      value: 202106
    gcc:
    - since: C++23
      value: 202106
    msvc:
    - since: C++23
      value: 202106
- name: __cpp_lib_ios_noreplace
  header_list: ios
  rows:
  - value: 202207
    papers: P2467R1
    cppreference-description: Support [[cpp/io/ios_base/openmode|exclusive mode]]
      for fstreams
  support:
    clang:
    - since: C++23
      value: 202207
    gcc:
    - since: C++23
      value: 202207
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_is_aggregate
  header_list: type_traits
  rows:
  - value: 201703
    papers: LWG2911
    cppreference-description: '{{ltt|cpp/types/is_aggregate|std::is_aggregate}}'
  support:
    clang:
    - since: C++17
      value: 201703
    gcc:
    - since: C++17
      depends: defined(_GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE)
      value: 201703
    msvc:
    - since: C++17
      value: 201703
- name: __cpp_lib_is_constant_evaluated
  header_list: type_traits
  rows:
  - value: 201811
    papers: P0595R2
    cppreference-description: '{{ltt|cpp/types/is_constant_evaluated|std::is_constant_evaluated}}'
  support:
    clang:
    - since: C++20
      value: 201811
    gcc:
    - since: C++20
      depends: defined(_GLIBCXX_HAVE_IS_CONSTANT_EVALUATED)
      value: 201811
    msvc:
    - since: C++20
      value: 201811
- name: __cpp_lib_is_final
  header_list: type_traits
  rows:
  - value: 201402
    papers: LWG2112
    cppreference-description: '{{lc|std::is_final}}'
  support:
    clang:
    - since: C++14
      value: 201402
    gcc:
    - since: C++14
      value: 201402
    msvc:
    - value: 201402
- name: __cpp_lib_is_implicit_lifetime
  header_list: type_traits
  rows:
  - value: 202302
    papers: P2674R1
    cppreference-description: '{{ltt std|cpp/types/is_implicit_lifetime}}'
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_is_invocable
  header_list: type_traits
  rows:
  - value: 201703
    papers: P0604R0
    cppreference-description: '{{lc|std::is_invocable}}, {{lc|std::invoke_result}}'
  support:
    clang:
    - since: C++17
      value: 201703
    gcc:
    - since: C++17
      value: 201703
    msvc:
    - since: C++17
      value: 201703
- name: __cpp_lib_is_layout_compatible
  header_list: type_traits
  rows:
  - value: 201907
    papers: P0466R5
    cppreference-description: '{{ltt|cpp/types/is_layout_compatible|std::is_layout_compatible}}'
  support:
    clang: null
    gcc:
    - since: C++20
      depends: __has_builtin(__is_layout_compatible) && __has_builtin(__builtin_is_corresponding_member)
      value: 201907
    msvc:
    - since: C++20
      depends: '!defined(__clang__)'
      value: 201907
- name: __cpp_lib_is_nothrow_convertible
  header_list: type_traits
  rows:
  - value: 201806
    papers: P0758R1 LWG3356
    cppreference-description: '{{ltt|cpp/types/is_convertible|std::is_nothrow_convertible}}'
  support:
    clang:
    - since: C++20
      value: 201806
    gcc:
    - since: C++20
      value: 201806
    msvc:
    - since: C++20
      value: 201806
- name: __cpp_lib_is_null_pointer
  header_list: type_traits
  rows:
  - value: 201309
    papers: LWG2247
    cppreference-description: '{{lc|std::is_null_pointer}}'
  support:
    clang:
    - since: C++14
      value: 201309
    gcc:
    - since: C++11
      value: 201309
    msvc:
    - value: 201309
- name: __cpp_lib_is_pointer_interconvertible
  header_list: type_traits
  rows:
  - value: 201907
    papers: P0466R5
    cppreference-description: 'Pointer-interconvertibility traits: {{ltt|cpp/types/is_pointer_interconvertible_with_class|std::is_pointer_interconvertible_with_class}},
      {{ltt|cpp/types/is_pointer_interconvertible_base_of|std::is_pointer_interconvertible_base_of}}'
  support:
    clang: null
    gcc:
    - since: C++20
      depends: __has_builtin(__is_pointer_interconvertible_base_of) && __has_builtin(__builtin_is_pointer_interconvertible_with_class)
      value: 201907
    msvc:
    - since: C++20
      depends: '!defined(__clang__)'
      value: 201907
- name: __cpp_lib_is_scoped_enum
  header_list: type_traits
  rows:
  - value: 202011
    papers: P1048R1
    cppreference-description: '{{ltt|cpp/types/is_scoped_enum|std::is_scoped_enum}}'
  support:
    clang:
    - since: C++23
      value: 202011
    gcc:
    - since: C++23
      value: 202011
    msvc:
    - since: C++23
      value: 202011
- name: __cpp_lib_is_swappable
  header_list: type_traits
  rows:
  - value: 201603
    papers: P0185R1
    cppreference-description: '[[cpp/types/is_swappable|[{{tt|nothrow}}-]swappable
      traits]]'
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_lib_is_virtual_base_of
  header_list: type_traits
  rows:
  - value: 202406
    papers: P2985R0
    cppreference-description: '{{lc|std::is_virtual_base_of}}: type trait for detecting
      virtual base classes'
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_is_within_lifetime
  header_list: type_traits
  rows:
  - value: 202306
    papers: P2641R4
    cppreference-description: Checking if a union alternative is active ({{ltt|cpp/types/is_within_lifetime|std::is_within_lifetime}})
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_jthread
  header_list: stop_token thread
  rows:
  - value: 201907
    papers: P0660R10
  - value: 201911
    papers: P1869R1
    cppreference-description: '[[cpp/thread/stop_token|Stop token]] and [[cpp/thread/jthread|joining
      thread]]'
  support:
    clang:
    - since: C++20
      depends: '!defined(_LIBCPP_HAS_NO_THREADS) && !defined(_LIBCPP_HAS_NO_EXPERIMENTAL_STOP_TOKEN)
        && _LIBCPP_AVAILABILITY_HAS_SYNC'
      value: 201911
    gcc:
    - since: C++20
      depends: defined(_GLIBCXX_HAS_GTHREADS)
      value: 201911
    msvc:
    - since: C++20
      value: 201911
- name: __cpp_lib_latch
  header_list: latch
  rows:
  - value: 201907
    papers: P1135R6
    cppreference-description: '{{ltt|cpp/thread/latch|std::latch}}'
  support:
    clang:
    - since: C++20
      depends: '!defined(_LIBCPP_HAS_NO_THREADS) && _LIBCPP_AVAILABILITY_HAS_SYNC'
      value: 201907
    gcc:
    - since: C++20
      depends: __cpp_lib_atomic_wait
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_launder
  header_list: new
  rows:
  - value: 201606
    papers: P0137R1
    cppreference-description: 'Core Issue 1776: Replacement of class objects containing
      reference members ({{lc|std::launder}})'
  support:
    clang:
    - since: C++17
      value: 201606
    gcc:
    - since: C++17
      depends: defined(_GLIBCXX_HAVE_BUILTIN_LAUNDER)
      value: 201606
    msvc:
    - since: C++17
      value: 201606
- name: __cpp_lib_linalg
  header_list: linalg
  rows:
  - value: 202311
    papers: P1673R13
    cppreference-description: '[[cpp/numeric/linalg|A free function linear algebra
      interface based on the BLAS]]'
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_list_remove_return_type
  header_list: forward_list list
  rows:
  - value: 201806
    papers: P0646R1
    cppreference-description: Change the return type of the {{lc|std::list::remove|remove()}},
      {{lc|std::list::remove_if|remove_if()}} and {{lc|std::list::unique|unique()}}
      members of {{lc|std::forward_list}} and {{lc|std::list}}
  support:
    clang:
    - since: C++20
      value: 201806
    gcc:
    - since: C++20
      value: 201806
    msvc:
    - since: C++20
      value: 201806
- name: __cpp_lib_logical_traits
  header_list: type_traits
  rows:
  - value: 201510
    papers: P0013R1
    cppreference-description: '[[cpp/meta#Operations on traits|Logical operations
      on type traits]]'
  support:
    clang:
    - since: C++17
      value: 201510
    gcc:
    - since: C++17
      value: 201510
    msvc:
    - value: 201510
- name: __cpp_lib_make_from_tuple
  header_list: tuple
  rows:
  - value: 201606
    papers: P0209R2
    cppreference-description: '{{lc|std::make_from_tuple()}}'
  support:
    clang:
    - since: C++17
      value: 201606
    gcc:
    - since: C++17
      value: 201606
    msvc:
    - since: C++17
      value: 201606
- name: __cpp_lib_make_reverse_iterator
  header_list: iterator
  rows:
  - value: 201402
    papers: LWG2285
    cppreference-description: '{{ltt|cpp/iterator/make_reverse_iterator|std::make_reverse_iterator}}'
  support:
    clang:
    - since: C++14
      value: 201402
    gcc:
    - since: C++14
      value: 201402
    msvc:
    - value: 201402
- name: __cpp_lib_make_unique
  header_list: memory
  rows:
  - value: 201304
    papers: N3656
    cppreference-description: '{{lc|std::make_unique}}'
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_lib_map_try_emplace
  header_list: map
  rows:
  - value: 201411
    papers: N4279
    cppreference-description: '{{lc|std::map::try_emplace}}, {{lc|std::map::insert_or_assign}}'
  support:
    clang:
    - since: C++17
      value: 201411
    gcc:
    - since: C++17
      value: 201411
    msvc:
    - value: 201411
- name: __cpp_lib_math_constants
  header_list: numbers
  rows:
  - value: 201907
    papers: P0631R8
    cppreference-description: '[[cpp/numeric/constants|Mathematical constants]]'
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_math_special_functions
  header_list: cmath
  rows:
  - value: 201603
    papers: P0226R1
    cppreference-description: '[[cpp/numeric/special_functions|Mathematical special
      functions for C++17]]'
  support:
    clang: null
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_lib_mdspan
  header_list: mdspan
  rows:
  - value: 202207
    papers: P0009R18 P2599R2 P2604R0 P2613R1
    cppreference-description: '{{ltt|cpp/container/mdspan|std::mdspan}}'
  - value: 202406
    papers: P2389R2
    cppreference-description: '{{lc|std::dims}} for {{lc|std::mdspan}}'
  support:
    clang:
    - since: C++23
      value: 202207
    - since: C++26
      value: 202406
    gcc: null
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_memory_resource
  header_list: memory_resource
  rows:
  - value: 201603
    papers: P0220R1
    cppreference-description: '{{lc|std::pmr::memory_resource}}'
  support:
    clang:
    - since: C++17
      depends: _LIBCPP_AVAILABILITY_HAS_PMR
      value: 201603
    gcc:
    - since: C++17
      depends: '!defined(_GLIBCXX_HAS_GTHREADS)'
      value: 1
    - since: C++17
      depends: defined(_GLIBCXX_HAS_GTHREADS)
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_lib_modules
  rows:
  - papers: P2465R3
    value: 202207
    cppreference-description: '[[cpp/standard library#Importing modules|Standard library
      modules]] {{tt|std}} and {{tt|std.compat}}'
  support:
    clang:
    - since: C++23
      value: 202207
    gcc: null
    msvc:
    - since: C++20
      depends: '!defined(__clang__) && !defined(__EDG__)'
      value: 202207
- name: __cpp_lib_monadic_optional
  header_list: optional
  rows:
  - value: 202110
    papers: P0798R8
  - value: 202202
    papers: LWG3621
    removed: true
- name: __cpp_lib_move_iterator_concept
  header_list: iterator
  rows:
  - value: 202207
    papers: P2520R0
    cppreference-description: Make {{lc|std::move_iterator|std::move_iterator<T*>}}
      a random access iterator
  support:
    clang:
    - since: C++20
      value: 202207
    gcc:
    - since: C++20
      depends: __cpp_lib_concepts
      value: 202207
    msvc:
    - since: C++20
      value: 202207
- name: __cpp_lib_move_only_function
  header_list: functional
  rows:
  - value: 202110
    papers: P0288R9
    cppreference-description: '{{lc|std::move_only_function}}'
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202110
    msvc:
    - since: C++23
      value: 202110
- name: __cpp_lib_node_extract
  header_list: map set unordered_map unordered_set
  rows:
  - value: 201606
    papers: P0083R3
    cppreference-description: Splicing maps and sets ({{lc|std::map::extract}}, {{lc|std::map::merge}},
      {{ltt|cpp/container/map/insert|std::map::insert(node_type)}}, etc)
  support:
    clang:
    - since: C++17
      value: 201606
    gcc:
    - since: C++17
      value: 201606
    msvc:
    - since: C++17
      value: 201606
- name: __cpp_lib_nonmember_container_access
  header_list: iterator array deque forward_list list map regex set string unordered_map
    unordered_set vector
  rows:
  - value: 201411
    papers: N4280
    cppreference-description: '{{lc|std::size()}}, {{lc|std::data()}} and {{lc|std::empty()}}'
  support:
    clang:
    - since: C++17
      value: 201411
    gcc:
    - since: C++17
      value: 201411
    msvc:
    - value: 201411
- name: __cpp_lib_not_fn
  header_list: functional
  rows:
  - value: 201603
    papers: P0005R4
    cppreference-description: '{{lc|std::not_fn()}}'
  - value: 202306
    papers: P2714R1
    cppreference-description: Allow passing callable objects as non-type template
      arguments to {{lc|std::not_fn}}
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_lib_null_iterators
  header_list: iterator
  rows:
  - value: 201304
    papers: N3644
    cppreference-description: Null {{named req|ForwardIterator}}s
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_lib_optional
  header_list: optional
  rows:
  - value: 201603
    papers: P0220R1
  - value: 201606
    papers: P0032R3 P0307R2
    cppreference-description: '{{lc|std::optional}}'
  - value: 202106
    papers: P2231R1
    cppreference-description: Fully {{tt|constexpr}} {{lc|std::optional}}
    cppreference-treats-as-dr-against: C++20
  - value: 202110
    papers: P0798R8 LWG3621
    cppreference-description: '[[cpp/utility/optional#Monadic operations|Monadic operations]]
      in {{lc|std::optional}}'
  support:
    clang:
    - since: C++17
      value: 201606
    - since: C++23
      value: 202110
    gcc:
    - since: C++17
      value: 201606
    - since: C++20
      value: 202106
    - since: C++23
      depends: __cpp_lib_concepts
      value: 202110
    msvc:
    - since: C++17
      value: 201606
    - since: C++20
      value: 202106
    - since: C++23
      value: 202110
- name: __cpp_lib_optional_range_support
  header_list: optional
  rows:
  - value: 202406
    papers: P3168R2
    cppreference-description: '{{lc|std::optional}} range support'
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_out_ptr
  header_list: memory
  rows:
  - value: 202106
    papers: P1132R7
    cppreference-description: '{{lc|std::out_ptr}}, {{lc|std::inout_ptr}}'
  - value: 202311
    papers: P2833R2
    cppreference-description: Freestanding {{lc|std::out_ptr}}, {{lc|std::inout_ptr}}
  support:
    clang:
    - since: C++23
      value: 202106
    - since: C++26
      value: 202311
    gcc:
    - since: C++23
      value: 202311
    msvc:
    - since: C++23
      value: 202311
- name: __cpp_lib_parallel_algorithm
  header_list: algorithm numeric
  rows:
  - value: 201603
    papers: P0024R2
    cppreference-description: '[[cpp/algorithm#Execution policies|Parallel algorithms]]'
  support:
    clang: null
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_lib_philox_engine
  header_list: random
  rows:
  - value: 202406
    papers: P2075R6
    cppreference-description: '{{lc|std::philox_engine}}: counter-based random number
      engine'
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_polymorphic_allocator
  header_list: memory_resource
  rows:
  - value: 201902
    papers: P0339R6 LWG3437
    cppreference-description: '{{lc|std::pmr::polymorphic_allocator|std::pmr::polymorphic_allocator<>}}
      as a vocabulary type'
  support:
    clang:
    - since: C++20
      depends: _LIBCPP_AVAILABILITY_HAS_PMR
      value: 201902
    gcc:
    - since: C++20
      value: 201902
    msvc:
    - since: C++20
      value: 201902
- name: __cpp_lib_print
  header_list: ostream print
  rows:
  - value: 202207
    papers: P2093R14
    cppreference-description: Formatted output
  - value: 202403
    papers: P3107R5
    cppreference-description: Permit an efficient implementation of {{lc|std::print}}
  - value: 202406
    papers: P3235R3
    cppreference-description: Printing Blank Lines with {{lc|std::println}}
  support:
    clang:
    - since: C++23
      value: 202207
    gcc:
    - since: C++23
      value: 202211
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_quoted_string_io
  header_list: iomanip
  rows:
  - value: 201304
    papers: N3654
    cppreference-description: '{{lc|std::quoted}}'
  support:
    clang:
    - since: C++14
      depends: '!defined(_LIBCPP_HAS_NO_LOCALIZATION)'
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_lib_ranges
  header_list: algorithm functional iterator memory ranges
  rows:
  - value: 201811
    papers: P0896R4
  - value: 201907
    papers: P1035R7
  - value: 201911
    papers: P1716R3
    cppreference-description: '[[cpp/ranges|Ranges library]] and [[cpp/algorithm/ranges|constrained
      algorithms]]'
  - value: 202106
    papers: P2325R3
    cppreference-description: Non-[[cpp/concepts/default_initializable|default-initializable]]
      [[cpp/ranges/view|view]]s
    cppreference-treats-as-dr-against: C++20
  - value: 202110
    papers: P2415R2
    cppreference-description: '[[cpp/ranges/view|View]]s with [[cpp/ranges/owning_view|ownership]]'
    cppreference-treats-as-dr-against: C++20
  - value: 202202
    papers: P2387R3
    cppreference-description: '{{ltt|cpp/ranges/range_adaptor_closure|std::ranges::range_adaptor_closure}}'
  - value: 202207
    papers: P2494R2
    cppreference-description: Relaxing [[cpp/ranges|range adaptors]] to allow for
      move-only types
  - value: 202211
    papers: P2602R2
    cppreference-description: Removing 'poison pill' overloads in {{lc|ranges::begin}},
      {{lc|ranges::end}}, {{lc|ranges::rbegin}}, {{lc|ranges::rend}}, and {{lc|ranges::size}}
  - value: 202302
    papers: P2609R3
    cppreference-description: Relaxing ranges to allow certain projections
  - value: 202406
    papers: P2997R1
    cppreference-description: Removing the common reference requirement from the indirectly
      invocable concepts
  support:
    clang:
    - since: C++20
      value: 202207
    gcc:
    - since: C++20
      depends: __cpp_lib_concepts
      value: 202110
    - since: C++23
      depends: __cpp_lib_concepts
      value: 202211
    msvc:
    - since: C++20
      value: 202110
    - since: C++23
      value: 202406
- name: __cpp_lib_ranges_as_const
  header_list: ranges
  rows:
  - value: 202207
    papers: P2278R4
    cppreference-description: '{{lc|std::const_iterator}}, {{ltt|cpp/ranges/as_const_view|std::ranges::as_const_view}}'
  - value: 202311
    papers: P2836R1
    cppreference-description: Making {{lc|std::basic_const_iterator}} follow its underlying
      type's convertibility
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202311
    msvc:
    - since: C++23
      value: 202311
- name: __cpp_lib_ranges_as_rvalue
  header_list: ranges
  rows:
  - value: 202207
    papers: P2446R2
    cppreference-description: '{{ltt|cpp/ranges/as_rvalue_view|std::ranges::as_rvalue_view}}'
  support:
    clang:
    - since: C++23
      value: 202207
    gcc:
    - since: C++23
      value: 202207
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_ranges_cartesian_product
  header_list: ranges
  rows:
  - value: 202207
    papers: P2374R4 P2540R1
    cppreference-description: '{{ltt|cpp/ranges/cartesian_product_view|std::ranges::cartesian_product_view}}'
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202207
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_ranges_chunk
  header_list: ranges
  rows:
  - value: 202202
    papers: P2442R1
    cppreference-description: '{{ltt|cpp/ranges/chunk_view|std::ranges::chunk_view}}'
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202202
    msvc:
    - since: C++23
      value: 202202
- name: __cpp_lib_ranges_chunk_by
  header_list: ranges
  rows:
  - value: 202202
    papers: P2443R1
    cppreference-description: '{{ltt|cpp/ranges/chunk_by_view|std::ranges::chunk_by_view}}'
  support:
    clang:
    - since: C++23
      value: 202202
    gcc:
    - since: C++23
      value: 202202
    msvc:
    - since: C++23
      value: 202202
- name: __cpp_lib_ranges_concat
  header_list: ranges
  rows:
  - value: 202403
    papers: P2542R8
    cppreference-description: '{{ltt|cpp/ranges/concat_view|std::views::concat}}'
  support:
    clang: null
    gcc:
    - since: C++26
      value: 202403
    msvc: null
- name: __cpp_lib_ranges_contains
  header_list: algorithm
  rows:
  - value: 202207
    papers: P2302R4
    cppreference-description: '{{ltt|cpp/algorithm/ranges/contains|std::ranges::contains}}'
  support:
    clang:
    - since: C++23
      value: 202207
    gcc:
    - since: C++23
      value: 202207
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_ranges_enumerate
  header_list: ranges
  rows:
  - value: 202302
    papers: P2164R9
    cppreference-description: '{{lc|std::ranges::enumerate_view}}'
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202302
    msvc:
    - since: C++23
      value: 202302
- name: __cpp_lib_ranges_find_last
  header_list: algorithm
  rows:
  - value: 202207
    papers: P1223R5 LWG3807
    cppreference-description: '{{ltf std|cpp/algorithm/ranges/find_last|ranges::find_last}},
      {{ltf std|cpp/algorithm/ranges/find_last|ranges::find_last_if}}, and {{ltf std|cpp/algorithm/ranges/find_last|ranges::find_last_if_not}}'
  support:
    clang:
    - since: C++23
      value: 202207
    gcc:
    - since: C++23
      value: 202207
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_ranges_fold
  header_list: algorithm
  rows:
  - value: 202207
    papers: P2322R6
    cppreference-description: '{{tt|std::ranges}} [[cpp/algorithm/ranges#Constrained
      fold operations|fold algorithms]]'
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202207
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_ranges_generate_random
  header_list: random
  rows:
  - value: 202403
    papers: P1068R11
    cppreference-description: Vector API for random number generation ({{ltt|cpp/algorithm/ranges/generate_random|std::ranges::generate_random}})
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_ranges_iota
  header_list: numeric
  rows:
  - value: 202202
    papers: P2440R1
    cppreference-description: '{{lc|std::ranges::iota}}'
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202202
    msvc:
    - since: C++23
      value: 202202
- name: __cpp_lib_ranges_join_with
  header_list: ranges
  rows:
  - value: 202202
    papers: P2441R2
    cppreference-description: '{{lc|std::ranges::join_with_view}}'
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202202
    msvc:
    - since: C++23
      value: 202202
- name: __cpp_lib_ranges_repeat
  header_list: ranges
  rows:
  - value: 202207
    papers: P2474R2
    cppreference-description: '{{ltt|cpp/ranges/repeat_view|std::ranges::repeat_view}}'
  support:
    clang:
    - since: C++23
      value: 202207
    gcc:
    - since: C++23
      value: 202207
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_ranges_slide
  header_list: ranges
  rows:
  - value: 202202
    papers: P2442R1
    cppreference-description: '{{lc|std::ranges::slide_view}}'
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202202
    msvc:
    - since: C++23
      value: 202202
- name: __cpp_lib_ranges_starts_ends_with
  header_list: algorithm
  rows:
  - value: 202106
    papers: P1659R3
    cppreference-description: '{{lc|std::ranges::starts_with}}, {{lc|std::ranges::ends_with}}'
  support:
    clang:
    - since: C++23
      value: 202106
    gcc: null
    msvc:
    - since: C++23
      value: 202106
- name: __cpp_lib_ranges_stride
  header_list: ranges
  rows:
  - value: 202207
    papers: P1899R3
    cppreference-description: '{{ltt|cpp/ranges/stride_view|std::ranges::stride_view}}'
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202207
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_ranges_to_container
  header_list: ranges
  rows:
  - value: 202202
    papers: P1206R7
    cppreference-description: '{{lc|std::ranges::to}}'
  support:
    clang:
    - since: C++23
      value: 202202
    gcc:
    - since: C++23
      value: 202202
    msvc:
    - since: C++23
      value: 202202
- name: __cpp_lib_ranges_zip
  header_list: ranges tuple utility
  rows:
  - value: 202110
    papers: P2321R2
    cppreference-description: '{{lc|std::ranges::zip_view}}, {{lc|std::ranges::zip_transform_view}},
      {{lc|std::ranges::adjacent_view}}, {{lc|std::ranges::adjacent_transform_view}}'
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202110
    msvc:
    - since: C++23
      value: 202110
- name: __cpp_lib_ratio
  header_list: ratio
  rows:
  - value: 202306
    papers: P2734R0
    cppreference-description: Adding the new 2022 SI prefixes
  support:
    clang:
    - since: C++26
      value: 202306
    gcc:
    - since: C++26
      value: 202306
    msvc: null
- name: __cpp_lib_raw_memory_algorithms
  header_list: memory
  rows:
  - value: 201606
    papers: P0040R3
    cppreference-description: '[[cpp/memory#Uninitialized_storage|Extending memory
      management tools]]'
  support:
    clang:
    - since: C++17
      value: 201606
    gcc:
    - since: C++17
      value: 201606
    msvc:
    - since: C++17
      value: 201606
- name: __cpp_lib_rcu
  header_list: rcu
  rows:
  - value: 202306
    papers: P2545R4
    cppreference-description: Read-Copy Update (RCU)
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_reference_from_temporary
  header_list: type_traits
  rows:
  - value: 202202
    papers: P2255R2
    cppreference-description: '{{lc|std::reference_constructs_from_temporary}} and
      {{lc|std::reference_converts_from_temporary}}'
  support:
    clang: null
    gcc:
    - since: C++23
      depends: __has_builtin(__reference_constructs_from_temporary) && __has_builtin(__reference_converts_from_temporary)
      value: 202202
    msvc: null
- name: __cpp_lib_reference_wrapper
  header_list: functional
  rows:
  - value: 202403
    papers: P2944R3
    cppreference-description: Comparisons for {{lc|std::reference_wrapper}}
  support:
    clang:
    - since: C++26
      value: 202403
    gcc:
    - since: C++26
      value: 202403
    msvc: null
- name: __cpp_lib_remove_cvref
  header_list: type_traits
  rows:
  - value: 201711
    papers: P0550R2
    cppreference-description: '{{ltt|cpp/types/remove_cvref|std::remove_cvref}}'
  support:
    clang:
    - since: C++20
      value: 201711
    gcc:
    - since: C++20
      value: 201711
    msvc:
    - since: C++20
      value: 201711
- name: __cpp_lib_result_of_sfinae
  header_list: type_traits functional
  rows:
  - value: 201210
    papers: N3462
    cppreference-description: '{{lc|std::result_of}} and [[cpp/language/sfinae|SFINAE]]'
  support:
    clang:
    - since: C++14
      value: 201210
    gcc:
    - since: C++11
      value: 201210
    msvc:
    - value: 201210
- name: __cpp_lib_robust_nonmodifying_seq_ops
  header_list: algorithm
  rows:
  - value: 201304
    papers: N3671
    cppreference-description: Making non-modifying sequence operations more robust
      (two-range overloads for {{lc|std::mismatch}}, {{lc|std::equal}} and {{lc|std::is_permutation}})
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_lib_sample
  header_list: algorithm
  rows:
  - value: 201603
    papers: P0220R1
    cppreference-description: '{{lc|std::sample}}'
  support:
    clang:
    - since: C++17
      value: 201603
    gcc:
    - since: C++17
      value: 201603
    msvc:
    - since: C++17
      value: 201603
- name: __cpp_lib_saturation_arithmetic
  header_list: numeric
  rows:
  - value: 202311
    papers: P0543R3
    cppreference-description: '[[cpp/numeric#Saturation arithmetic (since C++26)|Saturation
      arithmetic]]'
  support:
    clang:
    - since: C++26
      value: 202311
    gcc:
    - since: C++26
      value: 202311
    msvc: null
- name: __cpp_lib_scoped_lock
  header_list: mutex
  rows:
  - value: 201703
    papers: P0156R2
    cppreference-description: '{{ltt|cpp/thread/scoped_lock|std::scoped_lock}}'
  support:
    clang:
    - since: C++17
      depends: '!defined(_LIBCPP_HAS_NO_THREADS)'
      value: 201703
    gcc:
    - since: C++17
      depends: defined(_GLIBCXX_HAS_GTHREADS)
      value: 201703
    msvc:
    - since: C++17
      value: 201703
- name: __cpp_lib_semaphore
  header_list: semaphore
  rows:
  - value: 201907
    papers: P1135R6
    cppreference-description: '[[cpp/thread/counting_semaphore|{{tt|std::counting_semaphore}},
      {{tt|std::binary_semaphore}}]]'
  support:
    clang:
    - since: C++20
      depends: '!defined(_LIBCPP_HAS_NO_THREADS) && _LIBCPP_AVAILABILITY_HAS_SYNC'
      value: 201907
    gcc:
    - since: C++20
      depends: __cpp_lib_atomic_wait || _GLIBCXX_HAVE_POSIX_SEMAPHORE
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_senders
  header_list: execution
  rows:
  - value: 202406
    papers: P2300R10
    cppreference-description: '{{lc|std::execution}}: sender-receiver model of execution
      control'
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_shared_mutex
  header_list: shared_mutex
  rows:
  - value: 201505
    papers: N4508
    cppreference-description: '{{lc|std::shared_mutex}} (untimed)'
  support:
    clang:
    - since: C++17
      depends: '!defined(_LIBCPP_HAS_NO_THREADS)'
      value: 201505
    gcc:
    - since: C++17
      depends: defined(_GLIBCXX_HAS_GTHREADS)
      value: 201505
    msvc:
    - value: 201505
- name: __cpp_lib_shared_ptr_arrays
  header_list: memory
  rows:
  - value: 201611
    papers: P0497R0
    cppreference-description: '{{lc|std::shared_ptr|std::shared_ptr<T[]>}}'
  - value: 201707
    papers: P0674R1
    cppreference-description: Array support of {{lc|std::make_shared}}
  support:
    clang:
    - since: C++17
      value: 201611
    - since: C++20
      value: 201707
    gcc:
    - since: C++11
      value: 201611
    - since: C++20
      value: 201707
    msvc:
    - value: 201611
    - since: C++20
      value: 201707
- name: __cpp_lib_shared_ptr_weak_type
  header_list: memory
  rows:
  - value: 201606
    papers: P0163R0
    cppreference-description: '{{ltt|cpp/memory/shared_ptr|shared_ptr::weak_type}}'
  support:
    clang:
    - since: C++17
      value: 201606
    gcc:
    - since: C++17
      value: 201606
    msvc:
    - since: C++17
      value: 201606
- name: __cpp_lib_shared_timed_mutex
  header_list: shared_mutex
  rows:
  - value: 201402
    papers: N3891
    cppreference-description: '{{lc|std::shared_timed_mutex}}'
  support:
    clang:
    - since: C++14
      depends: '!defined(_LIBCPP_HAS_NO_THREADS)'
      value: 201402
    gcc:
    - since: C++14
      depends: defined(_GLIBCXX_HAS_GTHREADS)
      value: 201402
    msvc:
    - value: 201402
- name: __cpp_lib_shift
  header_list: algorithm
  rows:
  - value: 201806
    papers: P0769R2
    cppreference-description: '{{ltt|cpp/algorithm/shift|std::shift_left}} and {{ltt|cpp/algorithm/shift|std::shift_right}}'
  - value: 202202
    papers: P2440R1
    cppreference-description: '{{lc|std::ranges::shift_left}} and {{lc|std::ranges::shift_right}}'
  support:
    clang:
    - since: C++20
      value: 201806
    gcc:
    - since: C++20
      value: 201806
    msvc:
    - since: C++20
      value: 201806
    - since: C++23
      value: 202202
- name: __cpp_lib_smart_ptr_for_overwrite
  header_list: memory
  rows:
  - value: 202002
    papers: P1020R1 P1973R1
    cppreference-description: Smart pointer creation with default initialization ({{lc|std::allocate_shared_for_overwrite}},
      {{lc|std::make_shared_for_overwrite}}, {{lc|std::make_unique_for_overwrite}})
  support:
    clang: null
    gcc:
    - since: C++20
      value: 202002
    msvc:
    - since: C++20
      value: 202002
- name: __cpp_lib_smart_ptr_owner_equality
  header_list: memory
  rows:
  - value: 202306
    papers: P1901R2
    cppreference-description: Enabling the use of {{lc|std::weak_ptr}} as keys in
      {{lsd|cpp/container#Unordered associative containers}}
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_source_location
  header_list: source_location
  rows:
  - value: 201907
    papers: P1208R6
    cppreference-description: Source-code information capture ({{lc|std::source_location}})
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      depends: __has_builtin(__builtin_source_location)
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_span
  header_list: span
  rows:
  - value: 201803
    papers: P0122R7 LWG3274
  - value: 201902
    papers: P1024R3
  - value: 202002
    papers: P1976R2
    cppreference-description: '{{ltt|cpp/container/span|std::span}}'
  - value: 202311
    papers: P2821R5 P2833R2
    cppreference-description: Making parts of {{lc|std::span}} freestanding
  support:
    clang:
    - since: C++20
      value: 202002
    gcc:
    - since: C++20
      depends: __cpp_lib_concepts
      value: 202002
    - since: C++26
      depends: __cpp_lib_concepts
      value: 202311
    msvc:
    - since: C++20
      value: 202002
- name: __cpp_lib_span_initializer_list
  header_list: span
  rows:
  - value: 202311
    papers: P2447R6
    cppreference-description: Constructing {{lc|std::span}} from an initializer list
  support:
    clang:
    - since: C++26
      value: 202311
    gcc: null
    msvc: null
- name: __cpp_lib_spanstream
  header_list: spanstream
  rows:
  - value: 202106
    papers: P0448R4
    cppreference-description: '{{ltt|cpp/io/basic_spanbuf|std::spanbuf}}, {{ltt|cpp/io/basic_spanstream|std::spanstream}}'
  support:
    clang: null
    gcc:
    - since: C++23
      depends: __cpp_lib_span
      value: 202106
    msvc:
    - since: C++23
      value: 202106
- name: __cpp_lib_ssize
  header_list: iterator
  rows:
  - value: 201902
    papers: P1227R2
    cppreference-description: '{{ltt|cpp/iterator/size|std::ssize}} and unsigned {{ltt|cpp/container/span/size|std::span::size}}'
  support:
    clang:
    - since: C++20
      value: 201902
    gcc:
    - since: C++20
      value: 201902
    msvc:
    - since: C++20
      value: 201902
- name: __cpp_lib_sstream_from_string_view
  header_list: sstream
  rows:
  - value: 202306
    papers: P2495R3
    cppreference-description: Interfacing {{lc|std::stringstream}}s with {{lc|std::string_view}}
  support:
    clang:
    - since: C++26
      value: 202306
    gcc: null
    msvc: null
- name: __cpp_lib_stacktrace
  header_list: stacktrace
  rows:
  - value: 202011
    papers: P0881R7
    cppreference-description: '[[cpp/error#Stacktrace|Stacktrace library]]'
  support:
    clang: null
    gcc:
    - since: C++23
      depends: _GLIBCXX_HAVE_STACKTRACE
      value: 202011
    msvc:
    - since: C++23
      value: 202011
- name: __cpp_lib_start_lifetime_as
  header_list: memory
  rows:
  - value: 202207
    papers: P2590R2
    cppreference-description: Explicit lifetime management ({{lc|std::start_lifetime_as}})
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_starts_ends_with
  header_list: string string_view
  rows:
  - value: 201711
    papers: P0457R2
    cppreference-description: String prefix and suffix checking ({{lc|std::string_view::starts_with|starts_with()}}
      and {{lc|std::string_view::ends_with|ends_with()}} for {{lc|std::string}} and
      {{lc|std::string_view}})
  support:
    clang:
    - since: C++20
      value: 201711
    gcc:
    - since: C++20
      value: 201711
    msvc:
    - since: C++20
      value: 201711
- name: __cpp_lib_stdatomic_h
  header_list: stdatomic.h
  rows:
  - value: 202011
    papers: P0943R6
    cppreference-description: Compatibility header for C atomic operations
  support:
    clang:
    - since: C++23
      value: 202011
    gcc:
    - since: C++23
      value: 202011
    msvc:
    - since: C++23
      value: 202011
- name: __cpp_lib_string_contains
  header_list: string string_view
  rows:
  - value: 202011
    papers: P1679R3
    cppreference-description: '{{tt|contains}} functions of {{ltt|cpp/string/basic_string/contains|std::basic_string}}
      and {{ltt|cpp/string/basic_string_view/contains|std::basic_string_view}}'
  support:
    clang:
    - since: C++23
      value: 202011
    gcc:
    - since: C++23
      value: 202011
    msvc:
    - since: C++23
      value: 202011
- name: __cpp_lib_string_resize_and_overwrite
  header_list: string
  rows:
  - value: 202110
    papers: P1072R10
    cppreference-description: '{{lc|std::basic_string::resize_and_overwrite}}'
  support:
    clang:
    - since: C++23
      value: 202110
    gcc:
    - since: C++23
      value: 202110
    msvc:
    - since: C++23
      value: 202110
- name: __cpp_lib_string_udls
  header_list: string
  rows:
  - value: 201304
    papers: N3642
    cppreference-description: '[[cpp/string/basic_string/operator""s|User-defined
      literals for string types]]'
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_lib_string_view
  header_list: string string_view
  rows:
  - value: 201603
    papers: P0220R1
  - value: 201606
    papers: P0254R2
    cppreference-description: '{{lc|std::string_view}}'
  - value: 201803
    papers: P0858R0 LWG3257
    cppreference-description: '{{named req|ConstexprIterator}}'
  - value: 202403
    papers: P2591R5
    cppreference-description: '[[cpp/string/basic_string/operator+|Concatenation]]
      of {{lc|std::string}}s and {{lc|std::string_view}}s'
  support:
    clang:
    - since: C++17
      value: 201606
    - since: C++20
      value: 201803
    - since: C++26
      value: 202403
    gcc:
    - since: C++17
      value: 201803
    msvc:
    - since: C++17
      value: 201803
- name: __cpp_lib_submdspan
  header_list: mdspan
  rows:
  - value: 202306
    papers: P2630R4
    cppreference-description: '{{lc|std::submdspan}}'
  - value: 202403
    papers: P2642R6
    cppreference-description: Padded mdspan layouts
  support:
    clang: null
    gcc: null
    msvc: null
- name: __cpp_lib_syncbuf
  header_list: syncstream
  rows:
  - value: 201711
    papers: P0053R7
  - value: 201803
    papers: P0753R2
    cppreference-description: Synchronized buffered ostream ({{lc|std::syncbuf}},
      {{lc|std::osyncstream}}) and manipulators
  support:
    clang:
    - since: C++20
      depends: '!defined(_LIBCPP_HAS_NO_EXPERIMENTAL_SYNCSTREAM)'
      value: 201803
    gcc:
    - since: C++20
      depends: _GLIBCXX_USE_CXX11_ABI
      value: 201803
    msvc:
    - since: C++20
      value: 201803
- name: __cpp_lib_text_encoding
  header_list: text_encoding
  rows:
  - value: 202306
    papers: P1885R12
    cppreference-description: '{{lc|std::text_encoding}}'
  support:
    clang: null
    gcc:
    - since: C++26
      depends: _GLIBCXX_USE_NL_LANGINFO_L
      value: 202306
    msvc: null
- name: __cpp_lib_three_way_comparison
  header_list: compare
  rows:
  - value: 201711
    papers: P0768R1
  - value: 201907
    papers: P1614R2
    cppreference-description: '[[cpp/language/operator_comparison#Three-way comparison|Three-way
      comparison]] (library support); adding three-way comparison to the library'
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      depends: __cpp_impl_three_way_comparison >= 201907L && __cpp_lib_concepts
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_to_address
  header_list: memory
  rows:
  - value: 201711
    papers: P0653R2
    cppreference-description: Utility to convert a pointer to a raw pointer ({{lc|std::to_address}})
  support:
    clang:
    - since: C++20
      value: 201711
    gcc:
    - since: C++20
      value: 201711
    msvc:
    - since: C++20
      value: 201711
- name: __cpp_lib_to_array
  header_list: array
  rows:
  - value: 201907
    papers: P0325R4
    cppreference-description: '{{ltt|cpp/container/array/to_array|std::to_array}}'
  support:
    clang:
    - since: C++20
      value: 201907
    gcc:
    - since: C++20
      depends: __cpp_generic_lambdas >= 201707L
      value: 201907
    msvc:
    - since: C++20
      value: 201907
- name: __cpp_lib_to_chars
  header_list: charconv
  rows:
  - value: 201611
    papers: P0067R5 P0682R1 LWG3137
    cppreference-description: Elementary string conversions ({{ltt|cpp/utility/to_chars|std::to_chars}},
      {{ltt|cpp/utility/from_chars|std::from_chars}})
  - value: 202306
    papers: P2497R0
    cppreference-description: Testing for success or failure of {{header|charconv}}
      functions
  support:
    clang: null
    gcc:
    - since: C++14
      depends: _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64
        && __SIZE_WIDTH__ >= 32
      value: 201611
    - since: C++26
      depends: _GLIBCXX_FLOAT_IS_IEEE_BINARY32 && _GLIBCXX_DOUBLE_IS_IEEE_BINARY64
        && __SIZE_WIDTH__ >= 32
      value: 202306
    msvc:
    - since: C++17
      value: 201611
- name: __cpp_lib_to_string
  header_list: string
  rows:
  - value: 202306
    papers: P2587R3
    cppreference-description: Redefining {{lc|std::to_string}} in terms of {{lc|std::format}}
  support:
    clang: null
    gcc:
    - since: C++26
      depends: __cpp_lib_to_chars
      value: 202306
    msvc: null
- name: __cpp_lib_to_underlying
  header_list: utility
  rows:
  - value: 202102
    papers: P1682R2
    cppreference-description: '{{ltt|cpp/utility/to_underlying|std::to_underlying}}
      <!--{{lc|std::to_underlying}}-->'
  support:
    clang:
    - since: C++23
      value: 202102
    gcc:
    - since: C++23
      value: 202102
    msvc:
    - since: C++23
      value: 202102
- name: __cpp_lib_transformation_trait_aliases
  header_list: type_traits
  rows:
  - value: 201304
    papers: N3655
    cppreference-description: Alias templates for TransformationTraits
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_lib_transparent_operators
  header_list: memory functional
  rows:
  - value: 201210
    papers: N3421
    cppreference-description: Transparent operator functors ({{lc|std::less<>}} et
      al)
    cppreference-header_list: functional
  - value: 201510
    papers: P0074R0
    cppreference-description: Transparent {{lc|std::owner_less}} ({{ltt|cpp/memory/owner_less_void|std::owner_less<void>}})
  support:
    clang:
    - since: C++14
      value: 201210
    - since: C++17
      value: 201510
    gcc:
    - since: C++14
      value: 201510
    msvc:
    - value: 201510
- name: __cpp_lib_tuple_element_t
  header_list: tuple
  rows:
  - value: 201402
    papers: N3887
    cppreference-description: '{{ltt|cpp/utility/tuple_element#Helper_types|std::tuple_element_t}}'
  support:
    clang:
    - since: C++14
      value: 201402
    gcc:
    - since: C++14
      value: 201402
    msvc:
    - value: 201402
- name: __cpp_lib_tuple_like
  header_list: map tuple unordered_map utility
  rows:
  - value: 202207
    papers: P2165R4
    cppreference-description: Compatibility between {{lc|std::tuple}} and tuple-like
      objects ({{lc|std::pair}}, {{lc|std::array}}, {{lc|std::subrange}})
  - value: 202311
    papers: P2819R2
    cppreference-description: Add tuple protocol to {{lc|std::complex}}
  support:
    clang: null
    gcc:
    - since: C++23
      value: 202207
    msvc:
    - since: C++23
      value: 202207
- name: __cpp_lib_tuples_by_type
  header_list: tuple utility
  rows:
  - value: 201304
    papers: N3670
    cppreference-description: '[[cpp/utility/tuple/get|Addressing tuples by type]]'
  support:
    clang:
    - since: C++14
      value: 201304
    gcc:
    - since: C++14
      value: 201304
    msvc:
    - value: 201304
- name: __cpp_lib_type_identity
  header_list: type_traits
  rows:
  - value: 201806
    papers: P0887R1
    cppreference-description: '{{lc|std::type_identity}}'
  support:
    clang:
    - since: C++20
      value: 201806
    gcc:
    - since: C++20
      value: 201806
    msvc:
    - since: C++20
      value: 201806
- name: __cpp_lib_type_trait_variable_templates
  header_list: type_traits
  rows:
  - value: 201510
    papers: P0006R0
    cppreference-description: Type traits variable templates ({{lc|std::is_void_v}},
      etc)
  support:
    clang:
    - since: C++17
      value: 201510
    gcc:
    - since: C++17
      value: 201510
    msvc:
    - value: 201510
- name: __cpp_lib_uncaught_exceptions
  header_list: exception
  rows:
  - value: 201411
    papers: N4259
    cppreference-description: '{{ltt|cpp/error/uncaught_exception|std::uncaught_exceptions}}'
  support:
    clang:
    - since: C++17
      value: 201411
    gcc:
    - since: C++17
      value: 201411
    msvc:
    - value: 201411
- name: __cpp_lib_unordered_map_try_emplace
  header_list: unordered_map
  rows:
  - value: 201411
    papers: N4279
    cppreference-description: '{{lc|std::unordered_map::try_emplace}}, {{lc|std::unordered_map::insert_or_assign}}'
  support:
    clang:
    - since: C++17
      value: 201411
    gcc:
    - since: C++17
      value: 201411
    msvc:
    - value: 201411
- name: __cpp_lib_unreachable
  header_list: utility
  rows:
  - value: 202202
    papers: P0627R6
    cppreference-description: '{{lc|std::unreachable}}'
  support:
    clang:
    - since: C++23
      value: 202202
    gcc:
    - since: C++23
      value: 202202
    msvc:
    - since: C++23
      value: 202202
- name: __cpp_lib_unwrap_ref
  header_list: type_traits
  rows:
  - value: 201811
    papers: P0318R1 LWG3348
    cppreference-description: '{{lc|std::unwrap_ref_decay}} and {{lc|std::unwrap_reference}}'
  support:
    clang:
    - since: C++20
      value: 201811
    gcc:
    - since: C++20
      value: 201811
    msvc:
    - since: C++20
      value: 201811
- name: __cpp_lib_variant
  header_list: variant
  rows:
  - value: 201606
    papers: P0088R3 P0393R3 P0032R3
    cppreference-description: '{{lc|std::variant}}: a type-safe union for C++17'
  - value: 202102
    papers: P2162R2
    cppreference-description: '{{lc|std::visit}} for classes derived from {{lc|std::variant}}'
    cppreference-treats-as-dr-against: C++17
  - value: 202106
    papers: P2231R1
    cppreference-description: Fully {{tt|constexpr}} {{lc|std::variant}}
    cppreference-treats-as-dr-against: C++20
  - value: 202306
    papers: P2637R3
    cppreference-description: Member {{ltt|cpp/utility/variant/visit2|visit}}
  support:
    clang:
    - since: C++17
      value: 202102
    gcc:
    - since: C++17
      value: 202102
    - since: C++20
      depends: __cpp_concepts >= 202002L && __cpp_constexpr >= 201811L
      value: 202106
    - since: C++26
      depends: __cpp_concepts >= 202002L && __cpp_constexpr >= 201811L && __cpp_explicit_this_parameter
      value: 202306
    msvc:
    - since: C++17
      value: 202102
    - since: C++20
      value: 202106
- name: __cpp_lib_void_t
  header_list: type_traits
  rows:
  - value: 201411
    papers: N3911
    cppreference-description: '{{lc|std::void_t}}'
  support:
    clang:
    - since: C++17
      value: 201411
    gcc:
    - since: C++17
      value: 201411
    msvc:
    - value: 201411
