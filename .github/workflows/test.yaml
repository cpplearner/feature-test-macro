name: Test

on:
    push:
        branches: [ master ]
    schedule:
        - cron: '0 0 */10 * *'

env:
    LLVM_VERSION: 20

jobs:
    clang:
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-python@v5
              with:
                  python-version: '3.12'
            - name: Install PyYAML
              run: pip install pyyaml
            - name: Install Clang
              run: |
                  REPO_NAME='deb http://apt.llvm.org/focal/ llvm-toolchain-focal main'
                  wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
                  sudo add-apt-repository "$REPO_NAME" && sudo apt-get update
                  sudo apt-get install -yV clang-$LLVM_VERSION libc++-$LLVM_VERSION-dev \
                    libc++1-$LLVM_VERSION libc++abi1-$LLVM_VERSION \
                    --no-install-recommends
                  mkdir bin && cp -s /usr/bin/clang-$LLVM_VERSION bin/clang
                  echo "$PWD/bin" >> $GITHUB_PATH

            - name: Test attributes
              run: python tools/do_test.py clang attributes

            - name: Test language
              run: python tools/do_test.py clang language

            - name: Test library
              run: python tools/do_test.py clang library
                    --extra-args -stdlib=libc++

            - name: Test library with -fexperimental-library
              run: python tools/do_test.py clang library
                    --extra-args -stdlib=libc++ -fexperimental-library

    gcc:
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-python@v5
              with:
                  python-version: '3.12'
            - name: Install PyYAML
              run: pip install pyyaml

            - uses: actions/cache/restore@v4
              with:
                  path: gcc-latest
                  key: gcc-cache-${{ github.sha }}
                  restore-keys: gcc-cache-
            - name: Install GCC
              run: |
                  LOC="$PWD"
                  if [ "$(cat "$LOC/gcc-latest/builddate.txt" || echo)" != "$(date +%F)" ]; then
                      git clone --depth=1 https://gcc.gnu.org/git/gcc.git
                      cd gcc
                      ./contrib/download_prerequisites
                      mkdir objdir && cd objdir
                      echo "::group::Installing GCC"
                      ../configure --prefix="$LOC/gcc-latest" \
                        --with-gxx-libcxx-include-dir=/usr/lib/llvm-$LLVM_VERSION/include/c++/v1/ \
                        --enable-languages=c,c++ --without-isl --disable-bootstrap \
                        --disable-shared --disable-gcov --disable-multilib \
                        --disable-libsanitizer --disable-libssp --disable-libquadmath \
                        --disable-libgomp --disable-libvtv --disable-lto
                      make -j2 && make install
                      echo "::endgroup::"
                      date +%F > $LOC/gcc-latest/builddate.txt
                  fi
                  echo "$LOC/gcc-latest/bin" >> $GITHUB_PATH
            - uses: actions/cache/save@v4
              with:
                path: gcc-latest
                key: gcc-cache-${{ github.sha }}

            - name: Test attributes
              run: python tools/do_test.py gcc attributes

            - name: Test language
              run: python tools/do_test.py gcc language

            - name: Test library
              run: python tools/do_test.py gcc library

    mix:
        runs-on: ubuntu-20.04
        needs: gcc
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-python@v5
              with:
                  python-version: '3.12'
            - name: Install PyYAML
              run: pip install pyyaml

            - uses: actions/cache/restore@v4
              with:
                  path: gcc-latest
                  key: gcc-cache-${{ github.sha }}
                  restore-keys: gcc-cache-

            - name: Install GCC
              run: |
                  echo "$PWD/gcc-latest/bin" >> $GITHUB_PATH
                  "$PWD/gcc-latest/bin/gcc" --version
            - name: Install Clang
              run: |
                  REPO_NAME='deb http://apt.llvm.org/focal/ llvm-toolchain-focal main'
                  wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
                  sudo add-apt-repository "$REPO_NAME" && sudo apt-get update
                  sudo apt-get install -yV clang-$LLVM_VERSION libc++-$LLVM_VERSION-dev \
                    libc++1-$LLVM_VERSION libc++abi1-$LLVM_VERSION \
                    --no-install-recommends
                  mkdir bin && cp -s /usr/bin/clang-$LLVM_VERSION bin/clang
                  echo "$PWD/bin" >> $GITHUB_PATH

            - name: Test libstdc++ with Clang
              run: python tools/do_test.py gcc library
                    --cc clang --extra-args -fno-caret-diagnostics
                     -stdlib=libstdc++ --gcc-toolchain="$PWD/gcc-latest"

            - name: Test libc++ with GCC
              run: python tools/do_test.py clang library
                    --cc gcc --std C++11 C++14 C++17 C++20 C++23 C++26
                    --extra-args -fno-diagnostics-show-caret
                     -ftrack-macro-expansion=0 -stdlib=libc++

    msvc:
        runs-on: windows-2019
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-python@v5
              with:
                  python-version: '3.12'
            - name: Install PyYAML
              run: pip install pyyaml
            - name: Install MSVC
              run: |
                  $LOC="$PWD"
                  mkdir msvc && cd msvc
                  git clone --depth=1 https://github.com/microsoft/STL/
                  [string]$bootstrapperExe = '.\vs_community.exe'
                  curl.exe -L -o $bootstrapperExe https://aka.ms/vs/17/pre/vs_community.exe &&
                  cmd /c $bootstrapperExe --quiet --norestart --wait --nocache `
                    --installPath "$LOC/msvc-preview" `
                    --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 `
                    --add Microsoft.VisualStudio.Component.VC.CoreIde
                  if ($LASTEXITCODE -eq 3010) { exit 0 }
            - name: Set Path
              shell: cmd
              run: |
                  call "msvc-preview/Common7/Tools/VsDevCmd.bat"
                  echo PATH=%PATH% >> %GITHUB_ENV%
                  echo INCLUDE=msvc/STL/stl/inc;%INCLUDE% >> %GITHUB_ENV%

            - name: Test attributes
              run: python tools/do_test.py msvc attributes

            - name: Test language
              run: python tools/do_test.py msvc language

            - name: Test library
              run: python tools/do_test.py msvc library

            - name: Install Clang
              run: |
                  curl.exe -L -o llvm.exe `
                    https://github.com/llvm/llvm-project/releases/download/llvmorg-18.1.5/LLVM-18.1.5-win64.exe
                  7z x llvm.exe -oLLVM
                  echo "$PWD\LLVM\bin" | Out-File -FilePath "$env:GITHUB_PATH" -Encoding utf8 -Append

            - name: Test MSVC STL with Clang
              run: python tools/do_test.py msvc library
                    --cc clang-cl
                    --extra-args -diagnostics:classic
