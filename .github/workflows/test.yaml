name: Test

on:
    push:
        branches: [ master ]
    schedule:
        - cron: '0 0 */10 * *'

env:
    LLVM_VERSION: 12
    GCC_VERSION: 11
    INSTALL_CLANG: |
        REPO_NAME='deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main'
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "$REPO_NAME"
        sudo apt-get update
        sudo apt-get install -y clang-$LLVM_VERSION libc++-$LLVM_VERSION-dev \
          --no-install-recommends
        mkdir bin && cp -s /usr/bin/clang-$LLVM_VERSION bin/clang
        echo "$PWD/bin" >> $GITHUB_PATH

jobs:
    clang:
        runs-on: ubuntu-18.04
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-python@v2
              with:
                  python-version: 3.8
            - name: Install PyYAML
              run: pip install pyyaml
            - name: Install Clang
              run: |
                  bash --noprofile --norc -eo pipefail -c "$INSTALL_CLANG"

            - name: Test attributes
              run: python tools/do_test.py clang attributes --verbose

            - name: Test language
              run: python tools/do_test.py clang language --verbose

            - name: Test library
              run: python tools/do_test.py clang library --verbose
                    --extra-args -stdlib=libc++

    gcc:
        runs-on: ubuntu-18.04
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-python@v2
              with:
                  python-version: 3.8
            - name: Install PyYAML
              run: pip install pyyaml
            - uses: actions/cache@v1
              id: cache-gcc
              with:
                  path: gcc-latest
                  key: gcc-cache-${{ github.sha }}
                  restore-keys: gcc-cache-
            - name: Install GCC
              run: |
                  LOC="$PWD"
                  mkdir gcc && cd gcc
                  URL="https://gcc.gnu.org/pub/gcc/snapshots/LATEST-$GCC_VERSION"
                  wget "$URL/index.html"
                  TARFILE=$(grep -Eo "gcc-$GCC_VERSION-[0-9]{8}.tar.xz" index.html | uniq)
                  PKGDATE=$(echo $TARFILE | grep -Eo "[0-9]{8}")
                  BASENAME=gcc-$GCC_VERSION-$PKGDATE
                  if "$LOC/gcc-latest/bin/gcc" --version | grep $PKGDATE; then
                      :
                  else
                      sudo apt-get install -y flex
                      wget --progress=dot:giga "$URL/$TARFILE"
                      echo "::group::Installing GCC"
                      tar -xf "$TARFILE"
                      cd $BASENAME
                      ./contrib/download_prerequisites
                      mkdir objdir && cd objdir
                      ../configure --prefix="$LOC/gcc-latest" \
                        --enable-languages=c,c++ --without-isl --disable-bootstrap \
                        --disable-shared --disable-gcov --disable-multilib \
                        --disable-libsanitizer --disable-libssp --disable-libquadmath \
                        --disable-libgomp --disable-libvtv --disable-lto
                      make -j2 && make install
                      echo "::endgroup::"
                  fi
                  echo "$LOC/gcc-latest/bin" >> $GITHUB_PATH

            - name: Test attributes
              run: python tools/do_test.py gcc attributes --verbose

            - name: Test language
              run: python tools/do_test.py gcc language --verbose

            - name: Test library
              run: python tools/do_test.py gcc library --verbose

            - name: Install Clang
              run: |
                  bash --noprofile --norc -eo pipefail -c "$INSTALL_CLANG"

            - name: Test libstdc++ with Clang
              run: python tools/do_test.py gcc library --verbose
                    --cc clang --extra-args -fno-caret-diagnostics
                     -stdlib=libstdc++ --gcc-toolchain="$PWD/gcc-latest"

            - name: Test libc++ with GCC
              run: python tools/do_test.py clang library --verbose
                    --cc gcc --std C++11 C++14 C++17 C++20
                    --extra-args -fno-diagnostics-show-caret
                     -ftrack-macro-expansion=0 -nostdinc++
                     -I /usr/lib/llvm-$LLVM_VERSION/include/c++/v1/

    msvc:
        runs-on: windows-2019
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-python@v2
              with:
                  python-version: 3.8
            - name: Install PyYAML
              run: pip install pyyaml
            - name: Install MSVC
              run: |
                  $LOC="$PWD"
                  mkdir msvc && cd msvc
                  git clone --depth=1 https://github.com/microsoft/STL/
                  [string]$bootstrapperExe = '.\vs_buildtools.exe'
                  curl.exe -L -o $bootstrapperExe https://aka.ms/vs/16/pre/vs_buildtools.exe &&
                  cmd /c $bootstrapperExe --quiet --norestart --wait --nocache `
                    --installPath "$LOC/msvc-preview" `
                    --add Microsoft.VisualStudio.Component.VC.CoreIde `
                    --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64
                  if ($LASTEXITCODE -eq 3010) { exit 0 }
            - name: Set Path
              shell: cmd
              run: |
                  call "msvc-preview/Common7/Tools/VsDevCmd.bat"
                  echo PATH=%PATH% >> %GITHUB_ENV%
                  echo INCLUDE=msvc/STL/stl/inc;%INCLUDE% >> %GITHUB_ENV%

            - name: Test attributes
              run: python tools/do_test.py msvc attributes --verbose

            - name: Test language
              run: python tools/do_test.py msvc language --verbose

            - name: Test library
              run: python tools/do_test.py msvc library --verbose

            - name: Test MSVC STL with EDG
              run: python tools/do_test.py msvc library --verbose
                    --extra-args -BE -dE--brief_diagnostics

            - name: Install Clang
              run: |
                  curl.exe -L -o llvm.exe `
                    https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/LLVM-11.0.0-win64.exe
                  7z x llvm.exe -oLLVM
                  echo "$PWD\LLVM\bin" >> $GITHUB_PATH

            - name: Test MSVC STL with Clang
              run: python tools/do_test.py msvc library --verbose
                    --cc clang-cl --extra-args -fno-caret-diagnostics
